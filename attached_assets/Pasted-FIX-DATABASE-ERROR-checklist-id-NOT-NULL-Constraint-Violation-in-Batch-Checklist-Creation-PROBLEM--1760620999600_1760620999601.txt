FIX DATABASE ERROR: checklist_id NOT NULL Constraint Violation in Batch Checklist Creation

PROBLEM:
Batch checklist creation fails with error:
"null value in column 'checklist_id' of relation 'checklists' violates not-null constraint"

The checklists table has a checklist_id column with NOT NULL constraint, but the INSERT 
statement doesn't provide a value for it, causing batch creation to fail.

═══════════════════════════════════════════════════════════════════════════════
SOLUTION: Apply 3 fixes to server.js
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│ FIX 1: Add Schema Diagnosis & Fix Endpoint                                 │
└─────────────────────────────────────────────────────────────────────────────┘

ADD this temporary endpoint to server.js (after other routes, before error handlers):

// TEMPORARY: Fix checklist_id schema issue
app.get('/admin/fix-checklist-schema', authenticateToken, async (req, res) => {
  try {
    // Check current schema
    const schemaCheck = await pool.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'checklists'
      AND column_name IN ('id', 'checklist_id')
      ORDER BY column_name
    `);
    
    const hasChecklistId = schemaCheck.rows.some(r => r.column_name === 'checklist_id');
    const checklistIdInfo = schemaCheck.rows.find(r => r.column_name === 'checklist_id');
    const isNotNull = checklistIdInfo?.is_nullable === 'NO';
    
    let result = {
      current_schema: schemaCheck.rows,
      has_checklist_id: hasChecklistId,
      checklist_id_not_null: isNotNull,
      diagnosis: ''
    };
    
    // Diagnose and fix
    if (!hasChecklistId) {
      result.diagnosis = 'checklist_id column does not exist - no fix needed';
      result.fix_applied = 'None needed';
    } else if (isNotNull) {
      // Apply fix: make nullable
      await pool.query('ALTER TABLE checklists ALTER COLUMN checklist_id DROP NOT NULL');
      result.diagnosis = 'checklist_id was NOT NULL without default - FIXED';
      result.fix_applied = '✅ Made checklist_id nullable';
      
      // Also set existing null values to id
      await pool.query('UPDATE checklists SET checklist_id = id WHERE checklist_id IS NULL');
      result.fix_applied += ' and set existing nulls to id';
    } else {
      result.diagnosis = 'checklist_id is already nullable';
      result.fix_applied = 'None needed';
    }
    
    // Verify fix
    const afterFix = await pool.query(`
      SELECT column_name, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'checklists'
      AND column_name = 'checklist_id'
    `);
    
    result.after_fix = afterFix.rows[0] || { note: 'Column does not exist' };
    result.status = '✅ Schema check complete';
    
    res.json(result);
    
  } catch (error) {
    res.status(500).json({ 
      error: error.message, 
      stack: error.stack,
      hint: 'Schema fix failed - may need manual intervention'
    });
  }
});


┌─────────────────────────────────────────────────────────────────────────────┐
│ FIX 2: Update Batch Confirm Endpoint INSERT Statement                      │
└─────────────────────────────────────────────────────────────────────────────┘

FIND the section in /api/checklists/confirm-batch endpoint where it creates checklists:

        // Create checklist instance
        const checklistResult = await client.query(
          `INSERT INTO checklists (
            title, description, project_id, template_id, 
            related_issue_id, related_action_id, created_by,
            is_ai_generated, ai_confidence
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
          RETURNING *`,
          [...]
        );

REPLACE WITH (handles checklist_id properly):

        // Create checklist instance
        const checklistResult = await client.query(
          `INSERT INTO checklists (
            title, 
            description, 
            project_id, 
            template_id, 
            related_issue_id, 
            related_action_id, 
            created_by,
            is_ai_generated, 
            ai_confidence
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
          RETURNING *`,
          [
            preview.title,
            preview.description,
            project_id,
            templateId,
            source_type === 'issue' ? source_id : null,
            source_type === 'action-item' ? source_id : null,
            userId,
            true,
            preview.confidence || 85
          ]
        );
        
        // Set checklist_id to match id if column exists
        try {
          await client.query(
            'UPDATE checklists SET checklist_id = id WHERE id = $1 AND checklist_id IS NULL',
            [checklistResult.rows[0].id]
          );
        } catch (e) {
          // Column might not exist - that's OK
          console.log('Note: checklist_id column may not exist:', e.message);
        }


┌─────────────────────────────────────────────────────────────────────────────┐
│ FIX 3: Add Similar Fix to Single Checklist Confirm                         │
└─────────────────────────────────────────────────────────────────────────────┘

FIND the /api/checklists/confirm-generated endpoint's INSERT statement and apply 
the same UPDATE fix after the INSERT:

After the checklist INSERT in confirm-generated endpoint, ADD:

        // Set checklist_id to match id if column exists
        try {
          await client.query(
            'UPDATE checklists SET checklist_id = id WHERE id = $1 AND checklist_id IS NULL',
            [checklistResult.rows[0].id]
          );
        } catch (e) {
          // Column might not exist - that's OK
          console.log('Note: checklist_id column may not exist:', e.message);
        }


═══════════════════════════════════════════════════════════════════════════════
TESTING INSTRUCTIONS
═══════════════════════════════════════════════════════════════════════════════

After applying fixes:

1. Restart the server
2. Visit: /admin/fix-checklist-schema in your browser
3. Verify response shows:
   {
     "fix_applied": "✅ Made checklist_id nullable...",
     "status": "✅ Schema check complete"
   }
4. Try batch checklist generation again
5. Should work without checklist_id errors

If still getting errors, check the response from /admin/fix-checklist-schema 
and share it for further diagnosis.

═══════════════════════════════════════════════════════════════════════════════
EXPLANATION
═══════════════════════════════════════════════════════════════════════════════

ROOT CAUSE:
The checklists table has a checklist_id column with NOT NULL constraint but no 
default value. When INSERT doesn't include checklist_id, it's set to NULL, 
violating the constraint.

SOLUTION:
1. Make checklist_id nullable (so NULL is allowed)
2. Set checklist_id = id after each INSERT (so it has a value)
3. Add diagnostic endpoint to verify and fix schema issues

ALTERNATIVE:
If checklist_id is truly redundant, you could drop the column entirely:
ALTER TABLE checklists DROP COLUMN checklist_id;

But making it nullable is safer and maintains backward compatibility.
