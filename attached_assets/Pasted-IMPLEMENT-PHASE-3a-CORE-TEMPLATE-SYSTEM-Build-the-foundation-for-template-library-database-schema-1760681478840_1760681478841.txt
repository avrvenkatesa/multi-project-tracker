IMPLEMENT PHASE 3a: CORE TEMPLATE SYSTEM

Build the foundation for template library: database schema, CRUD APIs, 
save-as-template feature, and template gallery UI.

ESTIMATED TIME: 6-8 hours

CONTEXT:
Phase 1 ✅ - Core checklist system exists
Phase 2a ✅ - AI generation, PDF export, validation exists
Phase 2b ✅ - Multi-checklist generation, attachments exists
Phase 3a ⏳ - Now building template library foundation

GOAL:
Enable users to save checklists as reusable templates, browse template library,
and apply templates to create new checklists.

═══════════════════════════════════════════════════════════════════════════════
PART 1: DATABASE SCHEMA (1 hour)
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│ STEP 1: Create Template Library Tables                                     │
└─────────────────────────────────────────────────────────────────────────────┘

IMPORTANT: First check if checklist_templates table already exists from Phase 1.
It likely exists with basic structure. We need to ENHANCE it, not recreate it.

Run this to check existing schema:

SELECT column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name = 'checklist_templates'
ORDER BY ordinal_position;

Based on existing structure, ADD missing columns (don't recreate table):

-- Enhance existing checklist_templates table
ALTER TABLE checklist_templates 
ADD COLUMN IF NOT EXISTS is_public BOOLEAN DEFAULT false,
ADD COLUMN IF NOT EXISTS is_featured BOOLEAN DEFAULT false,
ADD COLUMN IF NOT EXISTS category VARCHAR(100) DEFAULT 'General',
ADD COLUMN IF NOT EXISTS tags TEXT[] DEFAULT '{}',
ADD COLUMN IF NOT EXISTS usage_count INTEGER DEFAULT 0,
ADD COLUMN IF NOT EXISTS rating_sum INTEGER DEFAULT 0,
ADD COLUMN IF NOT EXISTS rating_count INTEGER DEFAULT 0,
ADD COLUMN IF NOT EXISTS created_from_checklist_id INTEGER REFERENCES checklists(id) ON DELETE SET NULL,
ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;

-- Add indexes for performance
CREATE INDEX IF NOT EXISTS idx_templates_public ON checklist_templates(is_public) WHERE is_public = true;
CREATE INDEX IF NOT EXISTS idx_templates_category ON checklist_templates(category);
CREATE INDEX IF NOT EXISTS idx_templates_featured ON checklist_templates(is_featured) WHERE is_featured = true;
CREATE INDEX IF NOT EXISTS idx_templates_usage ON checklist_templates(usage_count DESC);
CREATE INDEX IF NOT EXISTS idx_templates_rating ON checklist_templates((rating_sum::float / NULLIF(rating_count, 0)) DESC);

-- Add GIN index for tag searching
CREATE INDEX IF NOT EXISTS idx_templates_tags ON checklist_templates USING GIN(tags);

-- Add trigger for updated_at
CREATE OR REPLACE FUNCTION update_template_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trigger_update_template_timestamp ON checklist_templates;
CREATE TRIGGER trigger_update_template_timestamp
  BEFORE UPDATE ON checklist_templates
  FOR EACH ROW
  EXECUTE FUNCTION update_template_timestamp();

-- Create template ratings table
CREATE TABLE IF NOT EXISTS template_ratings (
  id SERIAL PRIMARY KEY,
  template_id INTEGER NOT NULL REFERENCES checklist_templates(id) ON DELETE CASCADE,
  user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
  review TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  
  UNIQUE(template_id, user_id)
);

CREATE INDEX IF NOT EXISTS idx_ratings_template ON template_ratings(template_id);
CREATE INDEX IF NOT EXISTS idx_ratings_user ON template_ratings(user_id);

-- Create template usage tracking table
CREATE TABLE IF NOT EXISTS template_usage (
  id SERIAL PRIMARY KEY,
  template_id INTEGER NOT NULL REFERENCES checklist_templates(id) ON DELETE CASCADE,
  user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE SET NULL,
  checklist_id INTEGER REFERENCES checklists(id) ON DELETE SET NULL,
  project_id INTEGER REFERENCES projects(id) ON DELETE SET NULL,
  used_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_usage_template ON template_usage(template_id);
CREATE INDEX IF NOT EXISTS idx_usage_user ON template_usage(user_id);
CREATE INDEX IF NOT EXISTS idx_usage_date ON template_usage(used_at DESC);

-- Add comments for documentation
COMMENT ON COLUMN checklist_templates.is_public IS 'Whether template is visible in public gallery';
COMMENT ON COLUMN checklist_templates.is_featured IS 'Whether template is featured/highlighted';
COMMENT ON COLUMN checklist_templates.category IS 'Template category: General, Development, Infrastructure, Security, etc.';
COMMENT ON COLUMN checklist_templates.tags IS 'Array of tags for searching';
COMMENT ON COLUMN checklist_templates.usage_count IS 'Number of times template has been used';
COMMENT ON COLUMN checklist_templates.rating_sum IS 'Sum of all ratings (for average calculation)';
COMMENT ON COLUMN checklist_templates.rating_count IS 'Number of ratings received';
COMMENT ON COLUMN checklist_templates.created_from_checklist_id IS 'If template was saved from an existing checklist';

-- Add categories reference data
CREATE TABLE IF NOT EXISTS template_categories (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL UNIQUE,
  description TEXT,
  icon VARCHAR(50),
  display_order INTEGER DEFAULT 0,
  is_active BOOLEAN DEFAULT true
);

-- Insert default categories
INSERT INTO template_categories (name, description, icon, display_order) VALUES
('General', 'General purpose checklists', '📋', 1),
('Software Development', 'Development workflows and processes', '💻', 2),
('Infrastructure', 'Server, network, and infrastructure tasks', '🖥️', 3),
('Security', 'Security audits and compliance', '🔒', 4),
('Project Management', 'Project planning and tracking', '📊', 5),
('Testing & QA', 'Quality assurance and testing procedures', '🧪', 6),
('Documentation', 'Documentation and knowledge management', '📚', 7),
('DevOps', 'CI/CD, deployment, and operations', '⚙️', 8),
('Migration', 'Data and system migrations', '🔄', 9),
('Onboarding', 'Team and process onboarding', '👋', 10)
ON CONFLICT (name) DO NOTHING;


═══════════════════════════════════════════════════════════════════════════════
PART 2: BACKEND APIs (2 hours)
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│ STEP 2: Create Template Service (NEW FILE)                                 │
└─────────────────────────────────────────────────────────────────────────────┘

CREATE: server/template-service.js

const { Pool } = require('@neondatabase/serverless');
const pool = new Pool({ connectionString: process.env.DATABASE_URL });

/**
 * Save existing checklist as a reusable template
 */
async function saveChecklistAsTemplate(checklistId, userId, templateData) {
  const client = await pool.connect();
  
  try {
    await client.query('BEGIN');
    
    // Get the checklist details
    const checklistResult = await client.query(
      `SELECT c.*, 
        (SELECT json_agg(
          json_build_object(
            'id', s.id,
            'title', s.title,
            'description', s.description,
            'display_order', s.display_order
          ) ORDER BY s.display_order
        ) FROM checklist_sections s WHERE s.checklist_id = c.id) as sections
       FROM checklists c 
       WHERE c.id = $1`,
      [checklistId]
    );
    
    if (checklistResult.rows.length === 0) {
      throw new Error('Checklist not found');
    }
    
    const checklist = checklistResult.rows[0];
    
    // Check if user owns this checklist or has access
    const accessCheck = await client.query(
      `SELECT 1 FROM checklists c
       INNER JOIN projects p ON c.project_id = p.id
       INNER JOIN project_members pm ON p.id = pm.project_id
       WHERE c.id = $1 AND pm.user_id = $2`,
      [checklistId, userId]
    );
    
    if (accessCheck.rows.length === 0) {
      throw new Error('Access denied - you do not have permission to save this checklist as template');
    }
    
    // Create template
    const templateResult = await client.query(
      `INSERT INTO checklist_templates (
        name, 
        description, 
        category, 
        tags,
        created_by, 
        is_reusable,
        is_public,
        created_from_checklist_id
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      RETURNING *`,
      [
        templateData.name || checklist.title,
        templateData.description || checklist.description,
        templateData.category || 'General',
        templateData.tags || [],
        userId,
        true, // Always reusable when saved as template
        templateData.is_public || false,
        checklistId
      ]
    );
    
    const template = templateResult.rows[0];
    
    // Copy sections and items
    for (const section of checklist.sections || []) {
      const sectionResult = await client.query(
        `INSERT INTO checklist_template_sections (
          template_id, title, description, display_order
        ) VALUES ($1, $2, $3, $4)
        RETURNING id`,
        [template.id, section.title, section.description, section.display_order]
      );
      
      const templateSectionId = sectionResult.rows[0].id;
      
      // Get items for this section
      const itemsResult = await client.query(
        `SELECT * FROM checklist_items 
         WHERE section_id = $1 
         ORDER BY display_order`,
        [section.id]
      );
      
      // Copy items
      for (const item of itemsResult.rows) {
        await client.query(
          `INSERT INTO checklist_template_items (
            section_id, item_text, field_type, field_options, 
            is_required, help_text, display_order
          ) VALUES ($1, $2, $3, $4, $5, $6, $7)`,
          [
            templateSectionId,
            item.item_text,
            item.field_type,
            item.field_options,
            item.is_required,
            item.help_text,
            item.display_order
          ]
        );
      }
    }
    
    await client.query('COMMIT');
    
    return template;
    
  } catch (error) {
    await client.query('ROLLBACK');
    throw error;
  } finally {
    client.release();
  }
}

/**
 * Get template library with filters
 */
async function getTemplateLibrary(filters = {}) {
  const {
    category,
    tags,
    search,
    is_public = true,
    sort_by = 'usage', // 'usage', 'rating', 'recent', 'name'
    limit = 50,
    offset = 0
  } = filters;
  
  let whereClauses = ['t.is_reusable = true'];
  let params = [];
  let paramCount = 1;
  
  // Public templates only (unless specified)
  if (is_public) {
    whereClauses.push('t.is_public = true');
  }
  
  // Category filter
  if (category) {
    whereClauses.push(`t.category = $${paramCount}`);
    params.push(category);
    paramCount++;
  }
  
  // Tags filter (contains any of the tags)
  if (tags && tags.length > 0) {
    whereClauses.push(`t.tags && $${paramCount}`);
    params.push(tags);
    paramCount++;
  }
  
  // Search filter (name or description)
  if (search) {
    whereClauses.push(`(t.name ILIKE $${paramCount} OR t.description ILIKE $${paramCount})`);
    params.push(`%${search}%`);
    paramCount++;
  }
  
  // Sort order
  let orderBy = 't.usage_count DESC'; // Default
  if (sort_by === 'rating') {
    orderBy = '(t.rating_sum::float / NULLIF(t.rating_count, 0)) DESC NULLS LAST, t.usage_count DESC';
  } else if (sort_by === 'recent') {
    orderBy = 't.created_at DESC';
  } else if (sort_by === 'name') {
    orderBy = 't.name ASC';
  }
  
  const query = `
    SELECT 
      t.*,
      u.name as creator_name,
      (t.rating_sum::float / NULLIF(t.rating_count, 0)) as avg_rating,
      (SELECT COUNT(*) FROM checklist_template_sections WHERE template_id = t.id) as section_count,
      (SELECT COUNT(*) FROM checklist_template_items cti 
       INNER JOIN checklist_template_sections cts ON cti.section_id = cts.id 
       WHERE cts.template_id = t.id) as item_count
    FROM checklist_templates t
    LEFT JOIN users u ON t.created_by = u.id
    WHERE ${whereClauses.join(' AND ')}
    ORDER BY ${orderBy}
    LIMIT $${paramCount} OFFSET $${paramCount + 1}
  `;
  
  params.push(limit, offset);
  
  const result = await pool.query(query, params);
  
  // Get total count
  const countQuery = `
    SELECT COUNT(*) as total
    FROM checklist_templates t
    WHERE ${whereClauses.join(' AND ')}
  `;
  
  const countResult = await pool.query(countQuery, params.slice(0, -2)); // Remove limit/offset
  
  return {
    templates: result.rows,
    total: parseInt(countResult.rows[0].total),
    limit,
    offset
  };
}

/**
 * Get template by ID with full details
 */
async function getTemplateById(templateId, userId = null) {
  const result = await pool.query(
    `SELECT 
      t.*,
      u.name as creator_name,
      (t.rating_sum::float / NULLIF(t.rating_count, 0)) as avg_rating,
      ${userId ? `(SELECT rating FROM template_ratings WHERE template_id = t.id AND user_id = $2) as user_rating` : 'NULL as user_rating'}
    FROM checklist_templates t
    LEFT JOIN users u ON t.created_by = u.id
    WHERE t.id = $1`,
    userId ? [templateId, userId] : [templateId]
  );
  
  if (result.rows.length === 0) {
    throw new Error('Template not found');
  }
  
  const template = result.rows[0];
  
  // Get sections and items
  const sectionsResult = await pool.query(
    `SELECT 
      s.*,
      (SELECT json_agg(
        json_build_object(
          'id', i.id,
          'item_text', i.item_text,
          'field_type', i.field_type,
          'field_options', i.field_options,
          'is_required', i.is_required,
          'help_text', i.help_text,
          'display_order', i.display_order
        ) ORDER BY i.display_order
      ) FROM checklist_template_items i WHERE i.section_id = s.id) as items
    FROM checklist_template_sections s
    WHERE s.template_id = $1
    ORDER BY s.display_order`,
    [templateId]
  );
  
  template.sections = sectionsResult.rows;
  
  return template;
}

/**
 * Apply template to create new checklist
 */
async function applyTemplate(templateId, projectId, userId, customizations = {}) {
  const client = await pool.connect();
  
  try {
    await client.query('BEGIN');
    
    // Get template
    const template = await getTemplateById(templateId);
    
    // Check project access
    const accessCheck = await client.query(
      'SELECT 1 FROM project_members WHERE project_id = $1 AND user_id = $2',
      [projectId, userId]
    );
    
    if (accessCheck.rows.length === 0) {
      throw new Error('Access denied to this project');
    }
    
    // Create checklist from template
    const checklistResult = await client.query(
      `INSERT INTO checklists (
        title, description, project_id, template_id, created_by,
        related_issue_id, related_action_id
      ) VALUES ($1, $2, $3, $4, $5, $6, $7)
      RETURNING *`,
      [
        customizations.title || template.name,
        customizations.description || template.description,
        projectId,
        templateId,
        userId,
        customizations.related_issue_id || null,
        customizations.related_action_id || null
      ]
    );
    
    const checklist = checklistResult.rows[0];
    
    // Copy sections and items from template
    for (const section of template.sections) {
      const sectionResult = await client.query(
        `INSERT INTO checklist_sections (
          checklist_id, title, description, display_order
        ) VALUES ($1, $2, $3, $4)
        RETURNING id`,
        [checklist.id, section.title, section.description, section.display_order]
      );
      
      const checklistSectionId = sectionResult.rows[0].id;
      
      // Copy items
      for (const item of section.items || []) {
        await client.query(
          `INSERT INTO checklist_items (
            section_id, item_text, field_type, field_options,
            is_required, help_text, display_order, status
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, 'not-started')`,
          [
            checklistSectionId,
            item.item_text,
            item.field_type,
            item.field_options,
            item.is_required,
            item.help_text,
            item.display_order
          ]
        );
      }
    }
    
    // Update template usage count
    await client.query(
      'UPDATE checklist_templates SET usage_count = usage_count + 1 WHERE id = $1',
      [templateId]
    );
    
    // Track usage
    await client.query(
      `INSERT INTO template_usage (template_id, user_id, checklist_id, project_id)
       VALUES ($1, $2, $3, $4)`,
      [templateId, userId, checklist.id, projectId]
    );
    
    await client.query('COMMIT');
    
    return checklist;
    
  } catch (error) {
    await client.query('ROLLBACK');
    throw error;
  } finally {
    client.release();
  }
}

/**
 * Rate a template
 */
async function rateTemplate(templateId, userId, rating, review = null) {
  const client = await pool.connect();
  
  try {
    await client.query('BEGIN');
    
    // Validate rating
    if (rating < 1 || rating > 5) {
      throw new Error('Rating must be between 1 and 5');
    }
    
    // Check if user already rated
    const existingResult = await client.query(
      'SELECT rating FROM template_ratings WHERE template_id = $1 AND user_id = $2',
      [templateId, userId]
    );
    
    let oldRating = 0;
    if (existingResult.rows.length > 0) {
      oldRating = existingResult.rows[0].rating;
      
      // Update existing rating
      await client.query(
        `UPDATE template_ratings 
         SET rating = $1, review = $2, updated_at = CURRENT_TIMESTAMP
         WHERE template_id = $3 AND user_id = $4`,
        [rating, review, templateId, userId]
      );
      
      // Update template aggregates
      await client.query(
        `UPDATE checklist_templates 
         SET rating_sum = rating_sum - $1 + $2
         WHERE id = $3`,
        [oldRating, rating, templateId]
      );
      
    } else {
      // Insert new rating
      await client.query(
        `INSERT INTO template_ratings (template_id, user_id, rating, review)
         VALUES ($1, $2, $3, $4)`,
        [templateId, userId, rating, review]
      );
      
      // Update template aggregates
      await client.query(
        `UPDATE checklist_templates 
         SET rating_sum = rating_sum + $1, rating_count = rating_count + 1
         WHERE id = $2`,
        [rating, templateId]
      );
    }
    
    await client.query('COMMIT');
    
    // Return updated template
    return await getTemplateById(templateId, userId);
    
  } catch (error) {
    await client.query('ROLLBACK');
    throw error;
  } finally {
    client.release();
  }
}

/**
 * Get template categories
 */
async function getTemplateCategories() {
  const result = await pool.query(
    `SELECT * FROM template_categories 
     WHERE is_active = true 
     ORDER BY display_order`
  );
  
  return result.rows;
}

module.exports = {
  saveChecklistAsTemplate,
  getTemplateLibrary,
  getTemplateById,
  applyTemplate,
  rateTemplate,
  getTemplateCategories
};


┌─────────────────────────────────────────────────────────────────────────────┐
│ STEP 3: Add API Endpoints (server.js)                                      │
└─────────────────────────────────────────────────────────────────────────────┘

ADD to server.js (after existing checklist routes):

const {
  saveChecklistAsTemplate,
  getTemplateLibrary,
  getTemplateById,
  applyTemplate,
  rateTemplate,
  getTemplateCategories
} = require('./server/template-service');

// GET /api/templates - Get template library with filters
app.get('/api/templates', authenticateToken, async (req, res) => {
  try {
    const filters = {
      category: req.query.category,
      tags: req.query.tags ? req.query.tags.split(',') : undefined,
      search: req.query.search,
      is_public: req.query.is_public !== 'false', // Default true
      sort_by: req.query.sort_by || 'usage',
      limit: parseInt(req.query.limit) || 50,
      offset: parseInt(req.query.offset) || 0
    };
    
    const result = await getTemplateLibrary(filters);
    
    res.json(result);
    
  } catch (error) {
    console.error('Error fetching templates:', error);
    res.status(500).json({ error: 'Failed to fetch templates' });
  }
});

// GET /api/templates/categories - Get template categories
app.get('/api/templates/categories', authenticateToken, async (req, res) => {
  try {
    const categories = await getTemplateCategories();
    res.json(categories);
  } catch (error) {
    console.error('Error fetching categories:', error);
    res.status(500).json({ error: 'Failed to fetch categories' });
  }
});

// GET /api/templates/:id - Get template details
app.get('/api/templates/:id', authenticateToken, async (req, res) => {
  try {
    const templateId = parseInt(req.params.id);
    const userId = req.user.id;
    
    const template = await getTemplateById(templateId, userId);
    
    res.json(template);
    
  } catch (error) {
    console.error('Error fetching template:', error);
    if (error.message === 'Template not found') {
      res.status(404).json({ error: 'Template not found' });
    } else {
      res.status(500).json({ error: 'Failed to fetch template' });
    }
  }
});

// POST /api/templates/save-from-checklist - Save checklist as template
app.post('/api/templates/save-from-checklist', authenticateToken, async (req, res) => {
  try {
    const { checklist_id, name, description, category, tags, is_public } = req.body;
    const userId = req.user.id;
    
    if (!checklist_id) {
      return res.status(400).json({ error: 'checklist_id is required' });
    }
    
    if (!name) {
      return res.status(400).json({ error: 'Template name is required' });
    }
    
    const template = await saveChecklistAsTemplate(
      checklist_id,
      userId,
      {
        name,
        description,
        category: category || 'General',
        tags: tags || [],
        is_public: is_public || false
      }
    );
    
    res.status(201).json({
      success: true,
      template,
      message: 'Checklist saved as template successfully'
    });
    
  } catch (error) {
    console.error('Error saving template:', error);
    if (error.message.includes('Access denied')) {
      res.status(403).json({ error: error.message });
    } else if (error.message === 'Checklist not found') {
      res.status(404).json({ error: 'Checklist not found' });
    } else {
      res.status(500).json({ error: 'Failed to save template' });
    }
  }
});

// POST /api/templates/:id/apply - Apply template to create checklist
app.post('/api/templates/:id/apply', authenticateToken, async (req, res) => {
  try {
    const templateId = parseInt(req.params.id);
    const { project_id, title, description, related_issue_id, related_action_id } = req.body;
    const userId = req.user.id;
    
    if (!project_id) {
      return res.status(400).json({ error: 'project_id is required' });
    }
    
    const checklist = await applyTemplate(
      templateId,
      project_id,
      userId,
      {
        title,
        description,
        related_issue_id,
        related_action_id
      }
    );
    
    res.status(201).json({
      success: true,
      checklist,
      message: 'Template applied successfully'
    });
    
  } catch (error) {
    console.error('Error applying template:', error);
    if (error.message.includes('Access denied')) {
      res.status(403).json({ error: error.message });
    } else if (error.message === 'Template not found') {
      res.status(404).json({ error: 'Template not found' });
    } else {
      res.status(500).json({ error: 'Failed to apply template' });
    }
  }
});

// POST /api/templates/:id/rate - Rate a template
app.post('/api/templates/:id/rate', authenticateToken, async (req, res) => {
  try {
    const templateId = parseInt(req.params.id);
    const { rating, review } = req.body;
    const userId = req.user.id;
    
    if (!rating) {
      return res.status(400).json({ error: 'Rating is required' });
    }
    
    const template = await rateTemplate(templateId, userId, rating, review);
    
    res.json({
      success: true,
      template,
      message: 'Rating submitted successfully'
    });
    
  } catch (error) {
    console.error('Error rating template:', error);
    if (error.message.includes('must be between')) {
      res.status(400).json({ error: error.message });
    } else {
      res.status(500).json({ error: 'Failed to submit rating' });
    }
  }
});


═══════════════════════════════════════════════════════════════════════════════
PART 3: SAVE-AS-TEMPLATE FEATURE (1-2 hours)
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│ STEP 4: Add Save-as-Template Button to Checklist View                      │
└─────────────────────────────────────────────────────────────────────────────┘

UPDATE: public/js/checklists.js (or wherever checklist view is rendered)

FIND the checklist header/actions area and ADD "Save as Template" button:

// In renderChecklistView() or similar function:

<div class="checklist-actions">
  <!-- Existing buttons: Edit, Delete, Export PDF, etc. -->
  
  <button onclick="showSaveAsTemplateModal(${checklistId})" class="btn-secondary">
    <span class="icon">📚</span>
    Save as Template
  </button>
</div>


CREATE: public/js/template-manager.js (NEW FILE)

/**
 * Template Management Functions
 */

let currentChecklistForTemplate = null;
let templateCategories = [];

/**
 * Initialize template manager
 */
async function initTemplateManager() {
  try {
    const response = await fetch('/api/templates/categories', {
      credentials: 'include'
    });
    
    if (response.ok) {
      templateCategories = await response.json();
    }
  } catch (error) {
    console.error('Failed to load template categories:', error);
  }
}

/**
 * Show save-as-template modal
 */
async function showSaveAsTemplateModal(checklistId) {
  currentChecklistForTemplate = checklistId;
  
  // Get checklist details
  let checklistTitle = '';
  let checklistDescription = '';
  
  try {
    const response = await fetch(`/api/checklists/${checklistId}`, {
      credentials: 'include'
    });
    
    if (response.ok) {
      const checklist = await response.json();
      checklistTitle = checklist.title;
      checklistDescription = checklist.description;
    }
  } catch (error) {
    console.error('Failed to fetch checklist:', error);
  }
  
  const modal = document.getElementById('saveTemplateModal') || createSaveTemplateModal();
  
  const categoryOptions = templateCategories.map(cat => 
    `<option value="${cat.name}">${cat.icon} ${cat.name}</option>`
  ).join('');
  
  modal.querySelector('.modal-body').innerHTML = `
    <div class="save-template-form">
      <h4>💾 Save as Template</h4>
      <p class="help-text">Create a reusable template from this checklist that you and others can use.</p>
      
      <div class="form-group">
        <label for="templateName">Template Name *</label>
        <input 
          type="text" 
          id="templateName" 
          class="form-input" 
          value="${checklistTitle}"
          placeholder="E.g., Server Setup Checklist"
          required
        >
      </div>
      
      <div class="form-group">
        <label for="templateDescription">Description</label>
        <textarea 
          id="templateDescription" 
          class="form-textarea" 
          rows="3"
          placeholder="Describe what this template is for and when to use it..."
        >${checklistDescription}</textarea>
      </div>
      
      <div class="form-group">
        <label for="templateCategory">Category *</label>
        <select id="templateCategory" class="form-select" required>
          ${categoryOptions}
        </select>
      </div>
      
      <div class="form-group">
        <label for="templateTags">Tags (comma-separated)</label>
        <input 
          type="text" 
          id="templateTags" 
          class="form-input" 
          placeholder="E.g., linux, setup, automation"
        >
        <small class="help-text">Add tags to help others find this template</small>
      </div>
      
      <div class="form-group">
        <label class="checkbox-label">
          <input type="checkbox" id="templatePublic">
          <span>Make this template public (visible to all users)</span>
        </label>
        <small class="help-text">Public templates can be used by anyone in the organization</small>
      </div>
      
      <div class="modal-actions">
        <button onclick="saveAsTemplate()" class="btn-primary btn-large">
          💾 Save as Template
        </button>
        <button onclick="hideSaveTemplateModal()" class="btn-secondary">
          Cancel
        </button>
      </div>
    </div>
  `;
  
  modal.style.display = 'block';
}

function createSaveTemplateModal() {
  const modalHTML = `
    <div id="saveTemplateModal" class="modal">
      <div class="modal-content modal-medium">
        <div class="modal-header">
          <h3>📚 Save as Template</h3>
          <button onclick="hideSaveTemplateModal()" class="close-btn">&times;</button>
        </div>
        <div class="modal-body"></div>
      </div>
    </div>
  `;
  document.body.insertAdjacentHTML('beforeend', modalHTML);
  return document.getElementById('saveTemplateModal');
}

function hideSaveTemplateModal() {
  const modal = document.getElementById('saveTemplateModal');
  if (modal) modal.style.display = 'none';
  currentChecklistForTemplate = null;
}

/**
 * Save checklist as template
 */
async function saveAsTemplate() {
  const name = document.getElementById('templateName').value.trim();
  const description = document.getElementById('templateDescription').value.trim();
  const category = document.getElementById('templateCategory').value;
  const tagsInput = document.getElementById('templateTags').value.trim();
  const isPublic = document.getElementById('templatePublic').checked;
  
  if (!name) {
    showToast('Please enter a template name', 'error');
    return;
  }
  
  const tags = tagsInput ? tagsInput.split(',').map(t => t.trim()).filter(t => t) : [];
  
  try {
    showLoadingModal('Saving template...');
    
    const response = await fetch('/api/templates/save-from-checklist', {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        checklist_id: currentChecklistForTemplate,
        name,
        description,
        category,
        tags,
        is_public: isPublic
      })
    });
    
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || 'Failed to save template');
    }
    
    const result = await response.json();
    
    hideLoadingModal();
    hideSaveTemplateModal();
    
    showToast(`✅ Template "${name}" saved successfully!`, 'success');
    
    // Optionally navigate to template library
    setTimeout(() => {
      if (confirm('Template saved! Would you like to view the template library?')) {
        window.location.href = '/templates';
      }
    }, 1000);
    
  } catch (error) {
    console.error('Error saving template:', error);
    hideLoadingModal();
    showToast(`Failed to save template: ${error.message}`, 'error');
  }
}

// Initialize on page load
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initTemplateManager);
} else {
  initTemplateManager();
}


ADD to public/index.html (before closing </body>):

<script src="/js/template-manager.js"></script>


═══════════════════════════════════════════════════════════════════════════════
PART 4: TEMPLATE GALLERY UI (2-3 hours)
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│ STEP 5: Create Template Library Page                                       │
└─────────────────────────────────────────────────────────────────────────────┘

CREATE: public/templates.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Template Library - Multi-Project Tracker</title>
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="/css/templates.css">
</head>
<body>
  <div id="app">
    <!-- Navigation (same as other pages) -->
    <nav id="navbar"></nav>
    
    <div class="main-container">
      <div class="template-library">
        <!-- Header -->
        <div class="library-header">
          <h1>📚 Template Library</h1>
          <p class="subtitle">Browse and apply reusable checklist templates</p>
          
          <div class="library-actions">
            <button onclick="window.location.href='/checklists'" class="btn-secondary">
              ← Back to Checklists
            </button>
          </div>
        </div>
        
        <!-- Filters -->
        <div class="library-filters">
          <div class="filter-group">
            <label>Search</label>
            <input 
              type="text" 
              id="searchInput" 
              class="search-input" 
              placeholder="Search templates..."
              onkeyup="handleSearch()"
            >
          </div>
          
          <div class="filter-group">
            <label>Category</label>
            <select id="categoryFilter" class="filter-select" onchange="applyFilters()">
              <option value="">All Categories</option>
            </select>
          </div>
          
          <div class="filter-group">
            <label>Sort By</label>
            <select id="sortFilter" class="filter-select" onchange="applyFilters()">
              <option value="usage">Most Used</option>
              <option value="rating">Highest Rated</option>
              <option value="recent">Most Recent</option>
              <option value="name">Name (A-Z)</option>
            </select>
          </div>
          
          <div class="filter-group">
            <button onclick="clearFilters()" class="btn-link">Clear Filters</button>
          </div>
        </div>
        
        <!-- Stats -->
        <div class="library-stats" id="libraryStats">
          <div class="stat-card">
            <span class="stat-number" id="totalTemplates">-</span>
            <span class="stat-label">Templates</span>
          </div>
          <div class="stat-card">
            <span class="stat-number" id="totalCategories">-</span>
            <span class="stat-label">Categories</span>
          </div>
        </div>
        
        <!-- Templates Grid -->
        <div id="templatesContainer" class="templates-grid">
          <!-- Templates will be loaded here -->
        </div>
        
        <!-- Loading State -->
        <div id="loadingState" class="loading-state" style="display: none;">
          <div class="spinner"></div>
          <p>Loading templates...</p>
        </div>
        
        <!-- Empty State -->
        <div id="emptyState" class="empty-state" style="display: none;">
          <div class="empty-icon">📋</div>
          <h3>No templates found</h3>
          <p>Try adjusting your filters or create a new template from a checklist.</p>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Template Detail Modal -->
  <div id="templateDetailModal" class="modal" style="display: none;">
    <div class="modal-content modal-large">
      <div class="modal-header">
        <h3 id="templateDetailTitle">Template Details</h3>
        <button onclick="hideTemplateDetail()" class="close-btn">&times;</button>
      </div>
      <div class="modal-body" id="templateDetailBody">
        <!-- Template details loaded dynamically -->
      </div>
    </div>
  </div>
  
  <script src="/js/auth.js"></script>
  <script src="/js/navbar.js"></script>
  <script src="/js/app.js"></script>
  <script src="/js/template-library.js"></script>
</body>
</html>


CREATE: public/js/template-library.js

/**
 * Template Library Page
 */

let allTemplates = [];
let allCategories = [];
let currentFilters = {
  search: '',
  category: '',
  sort_by: 'usage'
};

// Debounce search
let searchTimeout;

/**
 * Initialize template library page
 */
async function initTemplateLibrary() {
  await loadCategories();
  await loadTemplates();
}

/**
 * Load template categories
 */
async function loadCategories() {
  try {
    const response = await fetch('/api/templates/categories', {
      credentials: 'include'
    });
    
    if (!response.ok) throw new Error('Failed to load categories');
    
    allCategories = await response.json();
    
    // Populate category filter
    const categoryFilter = document.getElementById('categoryFilter');
    allCategories.forEach(cat => {
      const option = document.createElement('option');
      option.value = cat.name;
      option.textContent = `${cat.icon} ${cat.name}`;
      categoryFilter.appendChild(option);
    });
    
    // Update stats
    document.getElementById('totalCategories').textContent = allCategories.length;
    
  } catch (error) {
    console.error('Error loading categories:', error);
    showToast('Failed to load categories', 'error');
  }
}

/**
 * Load templates with current filters
 */
async function loadTemplates() {
  const container = document.getElementById('templatesContainer');
  const loadingState = document.getElementById('loadingState');
  const emptyState = document.getElementById('emptyState');
  
  try {
    // Show loading
    container.style.display = 'none';
    emptyState.style.display = 'none';
    loadingState.style.display = 'flex';
    
    // Build query params
    const params = new URLSearchParams();
    if (currentFilters.search) params.append('search', currentFilters.search);
    if (currentFilters.category) params.append('category', currentFilters.category);
    params.append('sort_by', currentFilters.sort_by);
    params.append('limit', 100);
    
    const response = await fetch(`/api/templates?${params}`, {
      credentials: 'include'
    });
    
    if (!response.ok) throw new Error('Failed to load templates');
    
    const data = await response.json();
    allTemplates = data.templates;
    
    // Update stats
    document.getElementById('totalTemplates').textContent = data.total;
    
    // Hide loading
    loadingState.style.display = 'none';
    
    if (allTemplates.length === 0) {
      emptyState.style.display = 'flex';
    } else {
      container.style.display = 'grid';
      renderTemplates();
    }
    
  } catch (error) {
    console.error('Error loading templates:', error);
    loadingState.style.display = 'none';
    showToast('Failed to load templates', 'error');
  }
}

/**
 * Render templates to grid
 */
function renderTemplates() {
  const container = document.getElementById('templatesContainer');
  
  const templatesHTML = allTemplates.map(template => {
    const avgRating = template.avg_rating ? parseFloat(template.avg_rating).toFixed(1) : 'N/A';
    const stars = template.avg_rating ? '⭐'.repeat(Math.round(template.avg_rating)) : '';
    
    return `
      <div class="template-card" onclick="viewTemplateDetail(${template.id})">
        <div class="template-header">
          <h3>${template.name}</h3>
          <span class="template-category">${getCategoryIcon(template.category)} ${template.category}</span>
        </div>
        
        <p class="template-description">${template.description || 'No description'}</p>
        
        <div class="template-meta">
          <div class="meta-item">
            <span class="icon">📋</span>
            <span>${template.section_count} sections</span>
          </div>
          <div class="meta-item">
            <span class="icon">✓</span>
            <span>${template.item_count} items</span>
          </div>
          <div class="meta-item">
            <span class="icon">👤</span>
            <span>${template.usage_count} uses</span>
          </div>
        </div>
        
        ${template.tags && template.tags.length > 0 ? `
          <div class="template-tags">
            ${template.tags.slice(0, 3).map(tag => `<span class="tag">${tag}</span>`).join('')}
            ${template.tags.length > 3 ? `<span class="tag">+${template.tags.length - 3}</span>` : ''}
          </div>
        ` : ''}
        
        <div class="template-footer">
          <div class="template-rating">
            ${stars} ${avgRating !== 'N/A' ? `<span class="rating-number">${avgRating}</span>` : '<span class="no-rating">No ratings yet</span>'}
          </div>
          <button onclick="event.stopPropagation(); applyTemplatePrompt(${template.id})" class="btn-primary btn-small">
            Apply
          </button>
        </div>
      </div>
    `;
  }).join('');
  
  container.innerHTML = templatesHTML;
}

/**
 * Get category icon
 */
function getCategoryIcon(categoryName) {
  const category = allCategories.find(c => c.name === categoryName);
  return category ? category.icon : '📋';
}

/**
 * Handle search input
 */
function handleSearch() {
  clearTimeout(searchTimeout);
  searchTimeout = setTimeout(() => {
    currentFilters.search = document.getElementById('searchInput').value.trim();
    loadTemplates();
  }, 500);
}

/**
 * Apply filters
 */
function applyFilters() {
  currentFilters.category = document.getElementById('categoryFilter').value;
  currentFilters.sort_by = document.getElementById('sortFilter').value;
  loadTemplates();
}

/**
 * Clear filters
 */
function clearFilters() {
  document.getElementById('searchInput').value = '';
  document.getElementById('categoryFilter').value = '';
  document.getElementById('sortFilter').value = 'usage';
  
  currentFilters = {
    search: '',
    category: '',
    sort_by: 'usage'
  };
  
  loadTemplates();
}

/**
 * View template details
 */
async function viewTemplateDetail(templateId) {
  const modal = document.getElementById('templateDetailModal');
  const body = document.getElementById('templateDetailBody');
  
  try {
    body.innerHTML = '<div class="loading-spinner"><div class="spinner"></div><p>Loading template...</p></div>';
    modal.style.display = 'block';
    
    const response = await fetch(`/api/templates/${templateId}`, {
      credentials: 'include'
    });
    
    if (!response.ok) throw new Error('Failed to load template');
    
    const template = await response.json();
    
    const avgRating = template.avg_rating ? parseFloat(template.avg_rating).toFixed(1) : 'N/A';
    const stars = template.avg_rating ? '⭐'.repeat(Math.round(template.avg_rating)) : '';
    
    body.innerHTML = `
      <div class="template-detail">
        <div class="detail-header">
          <div class="detail-title-section">
            <h2>${template.name}</h2>
            <span class="category-badge">${getCategoryIcon(template.category)} ${template.category}</span>
          </div>
          <div class="detail-stats">
            <div class="stat">
              <span class="stat-label">Used</span>
              <span class="stat-value">${template.usage_count} times</span>
            </div>
            <div class="stat">
              <span class="stat-label">Rating</span>
              <span class="stat-value">${stars} ${avgRating}</span>
            </div>
          </div>
        </div>
        
        <div class="detail-description">
          <h4>Description</h4>
          <p>${template.description || 'No description provided'}</p>
        </div>
        
        ${template.tags && template.tags.length > 0 ? `
          <div class="detail-tags">
            <h4>Tags</h4>
            <div class="tags-list">
              ${template.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
            </div>
          </div>
        ` : ''}
        
        <div class="detail-structure">
          <h4>Checklist Structure</h4>
          <p class="structure-summary">${template.sections.length} sections, ${template.sections.reduce((sum, s) => sum + (s.items?.length || 0), 0)} items total</p>
          
          <div class="sections-preview">
            ${template.sections.map((section, idx) => `
              <div class="section-preview">
                <div class="section-header">
                  <h5>${idx + 1}. ${section.title}</h5>
                  <span class="item-count">${section.items?.length || 0} items</span>
                </div>
                ${section.description ? `<p class="section-desc">${section.description}</p>` : ''}
                <ul class="items-preview">
                  ${(section.items || []).slice(0, 5).map(item => `
                    <li>
                      <span class="field-type-badge">${item.field_type}</span>
                      ${item.item_text}
                      ${item.is_required ? '<span class="required-badge">Required</span>' : ''}
                    </li>
                  `).join('')}
                  ${(section.items?.length || 0) > 5 ? `
                    <li class="more-items">... and ${section.items.length - 5} more items</li>
                  ` : ''}
                </ul>
              </div>
            `).join('')}
          </div>
        </div>
        
        <div class="detail-actions">
          <button onclick="applyTemplatePrompt(${template.id})" class="btn-primary btn-large">
            ✅ Apply This Template
          </button>
          <button onclick="hideTemplateDetail()" class="btn-secondary">
            Close
          </button>
        </div>
      </div>
    `;
    
  } catch (error) {
    console.error('Error loading template detail:', error);
    body.innerHTML = `
      <div class="error-state">
        <p>Failed to load template details</p>
        <button onclick="hideTemplateDetail()" class="btn-secondary">Close</button>
      </div>
    `;
  }
}

function hideTemplateDetail() {
  document.getElementById('templateDetailModal').style.display = 'none';
}

/**
 * Prompt user to apply template
 */
async function applyTemplatePrompt(templateId) {
  // Get user's projects
  try {
    const projectsResponse = await fetch('/api/projects', {
      credentials: 'include'
    });
    
    if (!projectsResponse.ok) throw new Error('Failed to load projects');
    
    const projects = await projectsResponse.json();
    
    if (projects.length === 0) {
      showToast('You need to create a project first', 'warning');
      return;
    }
    
    const projectOptions = projects.map(p => 
      `<option value="${p.id}">${p.name}</option>`
    ).join('');
    
    // Show apply modal
    const modal = createApplyTemplateModal();
    modal.querySelector('.modal-body').innerHTML = `
      <div class="apply-template-form">
        <h4>Apply Template to Project</h4>
        
        <div class="form-group">
          <label for="applyProject">Select Project *</label>
          <select id="applyProject" class="form-select" required>
            ${projectOptions}
          </select>
        </div>
        
        <div class="form-group">
          <label for="applyTitle">Checklist Title (optional)</label>
          <input 
            type="text" 
            id="applyTitle" 
            class="form-input" 
            placeholder="Leave blank to use template name"
          >
        </div>
        
        <div class="modal-actions">
          <button onclick="confirmApplyTemplate(${templateId})" class="btn-primary btn-large">
            ✅ Create Checklist
          </button>
          <button onclick="hideApplyTemplateModal()" class="btn-secondary">
            Cancel
          </button>
        </div>
      </div>
    `;
    
    modal.style.display = 'block';
    
  } catch (error) {
    console.error('Error:', error);
    showToast('Failed to load projects', 'error');
  }
}

function createApplyTemplateModal() {
  let modal = document.getElementById('applyTemplateModal');
  if (!modal) {
    const modalHTML = `
      <div id="applyTemplateModal" class="modal">
        <div class="modal-content modal-medium">
          <div class="modal-header">
            <h3>Apply Template</h3>
            <button onclick="hideApplyTemplateModal()" class="close-btn">&times;</button>
          </div>
          <div class="modal-body"></div>
        </div>
      </div>
    `;
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    modal = document.getElementById('applyTemplateModal');
  }
  return modal;
}

function hideApplyTemplateModal() {
  const modal = document.getElementById('applyTemplateModal');
  if (modal) modal.style.display = 'none';
}

/**
 * Confirm and apply template
 */
async function confirmApplyTemplate(templateId) {
  const projectId = document.getElementById('applyProject').value;
  const title = document.getElementById('applyTitle').value.trim();
  
  if (!projectId) {
    showToast('Please select a project', 'error');
    return;
  }
  
  try {
    showLoadingModal('Creating checklist from template...');
    
    const response = await fetch(`/api/templates/${templateId}/apply`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        project_id: parseInt(projectId),
        title: title || undefined
      })
    });
    
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || 'Failed to apply template');
    }
    
    const result = await response.json();
    
    hideLoadingModal();
    hideApplyTemplateModal();
    hideTemplateDetail();
    
    showToast('✅ Checklist created successfully!', 'success');
    
    // Navigate to checklist
    setTimeout(() => {
      window.location.href = `/checklists/${result.checklist.id}`;
    }, 1000);
    
  } catch (error) {
    console.error('Error applying template:', error);
    hideLoadingModal();
    showToast(`Failed to apply template: ${error.message}`, 'error');
  }
}

// Initialize on page load
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initTemplateLibrary);
} else {
  initTemplateLibrary();
}


CREATE: public/css/templates.css

/* Template Library Styles */

.template-library {
  padding: 30px;
  max-width: 1400px;
  margin: 0 auto;
}

.library-header {
  margin-bottom: 40px;
}

.library-header h1 {
  margin-bottom: 10px;
  color: #1f2937;
}

.library-header .subtitle {
  color: #6b7280;
  font-size: 18px;
  margin-bottom: 20px;
}

.library-actions {
  margin-top: 20px;
}

/* Filters */
.library-filters {
  display: grid;
  grid-template-columns: 2fr 1fr 1fr auto;
  gap: 20px;
  margin-bottom: 30px;
  padding: 20px;
  background: white;
  border-radius: 12px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.filter-group label {
  display: block;
  font-weight: 600;
  color: #374151;
  margin-bottom: 8px;
  font-size: 14px;
}

.search-input,
.filter-select {
  width: 100%;
  padding: 10px 14px;
  border: 2px solid #e5e7eb;
  border-radius: 8px;
  font-size: 14px;
  transition: all 0.2s;
}

.search-input:focus,
.filter-select:focus {
  outline: none;
  border-color: #3b82f6;
}

/* Stats */
.library-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.stat-card {
  background: white;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  text-align: center;
}

.stat-number {
  display: block;
  font-size: 36px;
  font-weight: 700;
  color: #3b82f6;
  margin-bottom: 8px;
}

.stat-label {
  color: #6b7280;
  font-size: 14px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

/* Templates Grid */
.templates-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 24px;
}

.template-card {
  background: white;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  transition: all 0.3s;
  cursor: pointer;
  border: 2px solid transparent;
}

.template-card:hover {
  box-shadow: 0 8px 16px rgba(0,0,0,0.15);
  border-color: #3b82f6;
  transform: translateY(-4px);
}

.template-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 12px;
}

.template-header h3 {
  flex: 1;
  margin: 0;
  font-size: 18px;
  color: #1f2937;
}

.template-category {
  background: #dbeafe;
  color: #1e40af;
  padding: 4px 10px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: 600;
  white-space: nowrap;
  margin-left: 12px;
}

.template-description {
  color: #6b7280;
  font-size: 14px;
  line-height: 1.6;
  margin: 12px 0;
  min-height: 42px;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.template-meta {
  display: flex;
  gap: 16px;
  margin: 16px 0;
  padding: 12px 0;
  border-top: 1px solid #e5e7eb;
  border-bottom: 1px solid #e5e7eb;
}

.meta-item {
  display: flex;
  align-items: center;
  gap: 6px;
  font-size: 13px;
  color: #6b7280;
}

.meta-item .icon {
  font-size: 16px;
}

.template-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 6px;
  margin: 12px 0;
}

.tag {
  background: #f3f4f6;
  color: #4b5563;
  padding: 4px 10px;
  border-radius: 6px;
  font-size: 11px;
  font-weight: 500;
}

.template-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 16px;
}

.template-rating {
  display: flex;
  align-items: center;
  gap: 6px;
  font-size: 14px;
}

.rating-number {
  font-weight: 600;
  color: #1f2937;
}

.no-rating {
  color: #9ca3af;
  font-size: 12px;
}

/* Template Detail Modal */
.template-detail {
  padding: 20px;
}

.detail-header {
  margin-bottom: 30px;
  padding-bottom: 20px;
  border-bottom: 2px solid #e5e7eb;
}

.detail-title-section {
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 15px;
}

.detail-title-section h2 {
  margin: 0;
}

.category-badge {
  background: #dbeafe;
  color: #1e40af;
  padding: 6px 14px;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 600;
}

.detail-stats {
  display: flex;
  gap: 30px;
}

.stat {
  text-align: center;
}

.stat-label {
  display: block;
  font-size: 12px;
  color: #6b7280;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  margin-bottom: 4px;
}

.stat-value {
  display: block;
  font-size: 20px;
  font-weight: 700;
  color: #1f2937;
}

.detail-description,
.detail-tags,
.detail-structure {
  margin: 30px 0;
}

.detail-description h4,
.detail-tags h4,
.detail-structure h4 {
  margin-bottom: 12px;
  color: #1f2937;
}

.tags-list {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
}

.structure-summary {
  color: #6b7280;
  font-size: 14px;
  margin-bottom: 20px;
}

.sections-preview {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.section-preview {
  background: #f9fafb;
  padding: 20px;
  border-radius: 8px;
  border-left: 4px solid #3b82f6;
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

.section-header h5 {
  margin: 0;
  color: #1f2937;
}

.item-count {
  background: #e0e7ff;
  color: #3730a3;
  padding: 4px 10px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: 600;
}

.section-desc {
  color: #6b7280;
  font-size: 14px;
  margin-bottom: 12px;
}

.items-preview {
  list-style: none;
  padding: 0;
  margin: 0;
}

.items-preview li {
  padding: 8px 0;
  color: #374151;
  font-size: 14px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.field-type-badge {
  background: #dbeafe;
  color: #1e40af;
  padding: 2px 8px;
  border-radius: 4px;
  font-size: 10px;
  font-weight: 600;
  text-transform: uppercase;
}

.required-badge {
  background: #fee2e2;
  color: #991b1b;
  padding: 2px 8px;
  border-radius: 4px;
  font-size: 10px;
  font-weight: 600;
}

.more-items {
  color: #9ca3af;
  font-style: italic;
}

.detail-actions {
  margin-top: 30px;
  padding-top: 20px;
  border-top: 2px solid #e5e7eb;
  display: flex;
  gap: 12px;
}

/* States */
.loading-state,
.empty-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 80px 20px;
  text-align: center;
}

.empty-icon {
  font-size: 64px;
  margin-bottom: 20px;
}

.empty-state h3 {
  margin: 0 0 10px 0;
  color: #1f2937;
}

.empty-state p {
  color: #6b7280;
  max-width: 400px;
}

/* Responsive */
@media (max-width: 1024px) {
  .library-filters {
    grid-template-columns: 1fr 1fr;
  }
  
  .templates-grid {
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  }
}

@media (max-width: 768px) {
  .library-filters {
    grid-template-columns: 1fr;
  }
  
  .templates-grid {
    grid-template-columns: 1fr;
  }
  
  .template-meta {
    flex-direction: column;
    gap: 8px;
  }
}


ADD route to server.js:

app.get('/templates', (req, res) => {
  res.sendFile(__dirname + '/public/templates.html');
});


═══════════════════════════════════════════════════════════════════════════════
TESTING CHECKLIST
═══════════════════════════════════════════════════════════════════════════════

After implementation, test:

DATABASE:
[ ] Run database migrations successfully
[ ] Verify template_categories table has 10 default categories
[ ] Verify checklist_templates table has new columns
[ ] Verify template_ratings table exists
[ ] Verify template_usage table exists

SAVE AS TEMPLATE:
[ ] Open existing checklist
[ ] Click "Save as Template" button
[ ] Fill in template details (name, category, tags)
[ ] Save as private template - verify created
[ ] Save as public template - verify created
[ ] Verify template appears in library

TEMPLATE LIBRARY:
[ ] Navigate to /templates page
[ ] Verify templates load and display
[ ] Search for template by name - verify filters work
[ ] Filter by category - verify correct templates shown
[ ] Sort by usage/rating/recent/name - verify order changes
[ ] Click template card - verify detail modal opens
[ ] Verify template structure preview shows sections/items

APPLY TEMPLATE:
[ ] Click "Apply" on template card
[ ] Select project from dropdown
[ ] Optionally customize title
[ ] Confirm - verify checklist created
[ ] Navigate to checklist - verify structure matches template
[ ] Verify template usage_count incremented
[ ] Verify template_usage record created

RATINGS:
[ ] Rate a template (1-5 stars)
[ ] Add review text
[ ] Submit - verify rating saved
[ ] Verify avg_rating updates in template list
[ ] Rate same template again - verify updates existing rating

═══════════════════════════════════════════════════════════════════════════════
COMMIT MESSAGE
═══════════════════════════════════════════════════════════════════════════════

git add .
git commit -m "Implement Phase 3a: Core Template System

Database Schema:
- Enhanced checklist_templates table with library features
- Added template_ratings table for user ratings
- Added template_usage table for tracking
- Added template_categories with 10 default categories
- Added indexes for performance (tags, category, usage, rating)
- Added triggers for updated_at timestamps

Backend APIs:
- Created template-service.js with core functions
- saveChecklistAsTemplate() - convert checklist to template
- getTemplateLibrary() - browse with filters (search, category, sort)
- getTemplateById() - get full template details
- applyTemplate() - create checklist from template
- rateTemplate() - rate and review templates
- getTemplateCategories() - get category list

API Endpoints:
- GET /api/templates - browse library with filters
- GET /api/templates/categories - get categories
- GET /api/templates/:id - get template details
- POST /api/templates/save-from-checklist - save as template
- POST /api/templates/:id/apply - apply template
- POST /api/templates/:id/rate - rate template

Frontend Features:
- Save-as-Template modal with category/tags selection
- Template library page with search and filters
- Template cards with usage stats and ratings
- Template detail modal with full preview
- Apply template workflow with project selection
- Rating system UI

UI/UX:
- Responsive template grid layout
- Search, category filter, sort options
- Template preview with sections/items
- Usage and rating statistics
- Clean, modern styling

Relates to #49"

═══════════════════════════════════════════════════════════════════════════════

Implement Phase 3a now. This is the foundation for the template library system.
Estimated time: 6-8 hours for complete implementation.