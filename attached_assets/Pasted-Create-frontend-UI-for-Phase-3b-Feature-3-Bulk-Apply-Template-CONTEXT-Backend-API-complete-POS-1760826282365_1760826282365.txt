Create frontend UI for Phase 3b Feature 3: Bulk Apply Template

CONTEXT:
- Backend API complete: POST /api/templates/bulk-apply works
- Need UI to select multiple issues/action items and apply template
- Should work on both issues list page and action items list page
- Users need checkboxes, "Select All", and bulk action button

TASK:
Add multi-select functionality and bulk template application UI to the issues and action items list pages.

IMPLEMENTATION:

Part 1: Identify the Issues/Action Items List Page

Find the main issues list page. It's likely one of these:
- public/index.html (if using single-page app)
- public/issues.html
- public/app.js (if using dynamic rendering)

Look for where issues are displayed in a list/table format.

Part 2: Add Multi-Select UI

MODIFY the issues list rendering to include checkboxes:

BEFORE (example structure):
```html
<div class="issue-card">
  <h3>Issue Title</h3>
  <p>Description</p>
</div>
```

AFTER:
```html
<div class="issue-card">
  <input type="checkbox" class="issue-checkbox" data-issue-id="123" />
  <h3>Issue Title</h3>
  <p>Description</p>
</div>
```

Part 3: Add Bulk Action Controls

Add this control bar ABOVE the issues list:
```html
<!-- Bulk Actions Bar -->
<div id="bulkActionsBar" class="bulk-actions-bar" style="display: none;">
  <div class="flex items-center gap-4 p-4 bg-blue-50 border border-blue-200 rounded">
    <input type="checkbox" id="selectAllIssues" class="cursor-pointer" />
    <label for="selectAllIssues" class="font-medium">Select All</label>
    
    <span id="selectedCount" class="text-gray-600">0 selected</span>
    
    <button 
      id="bulkApplyTemplateBtn" 
      class="ml-auto px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-400"
      disabled
    >
      Apply Template to Selected
    </button>
    
    <button 
      id="clearSelectionBtn" 
      class="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300"
    >
      Clear Selection
    </button>
  </div>
</div>

<!-- Issues List (existing) -->
<div id="issuesList">
  <!-- Issues with checkboxes go here -->
</div>
```

Part 4: Add Template Selection Modal

Add this modal to the HTML (before closing </body>):
```html
<!-- Bulk Apply Template Modal -->
<div id="bulkApplyModal" class="modal hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
  <div class="bg-white rounded-lg p-6 max-w-md w-full">
    <h3 class="text-xl font-bold mb-4">Apply Template to Selected Items</h3>
    
    <p class="text-gray-600 mb-4">
      Applying template to <span id="modalSelectedCount">0</span> 
      <span id="modalEntityType">issue(s)</span>
    </p>
    
    <div class="mb-4">
      <label class="block text-sm font-medium mb-2">Select Template:</label>
      <select id="bulkTemplateSelect" class="w-full p-2 border rounded">
        <option value="">Loading templates...</option>
      </select>
    </div>
    
    <div id="bulkApplyProgress" class="mb-4 hidden">
      <div class="text-sm text-gray-600 mb-2">
        Applying... <span id="progressText">0/0</span>
      </div>
      <div class="w-full bg-gray-200 rounded-full h-2">
        <div id="progressBar" class="bg-blue-600 h-2 rounded-full transition-all" style="width: 0%"></div>
      </div>
    </div>
    
    <div id="bulkApplyResults" class="mb-4 hidden">
      <div class="text-sm">
        <div class="text-green-600">✅ Successful: <span id="successCount">0</span></div>
        <div class="text-red-600">❌ Failed: <span id="failCount">0</span></div>
      </div>
    </div>
    
    <div class="flex gap-2 justify-end">
      <button id="cancelBulkApply" class="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded">
        Cancel
      </button>
      <button id="confirmBulkApply" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
        Apply to All
      </button>
    </div>
  </div>
</div>
```

Part 5: Add JavaScript Logic

Add this JavaScript (in app.js or inline <script>):
```javascript
// ============================================
// Phase 3b Feature 3: Bulk Apply Template UI
// ============================================

let selectedIssues = new Set();
let allTemplates = [];

// Initialize bulk actions
function initBulkActions() {
  // Load templates
  loadTemplatesForBulk();
  
  // Select All checkbox
  document.getElementById('selectAllIssues')?.addEventListener('change', (e) => {
    const checkboxes = document.querySelectorAll('.issue-checkbox');
    checkboxes.forEach(cb => {
      cb.checked = e.target.checked;
      if (e.target.checked) {
        selectedIssues.add(parseInt(cb.dataset.issueId));
      } else {
        selectedIssues.delete(parseInt(cb.dataset.issueId));
      }
    });
    updateBulkActionsBar();
  });
  
  // Individual checkboxes (delegate from parent)
  document.addEventListener('change', (e) => {
    if (e.target.classList.contains('issue-checkbox')) {
      const issueId = parseInt(e.target.dataset.issueId);
      if (e.target.checked) {
        selectedIssues.add(issueId);
      } else {
        selectedIssues.delete(issueId);
      }
      updateBulkActionsBar();
    }
  });
  
  // Bulk Apply button
  document.getElementById('bulkApplyTemplateBtn')?.addEventListener('click', () => {
    showBulkApplyModal();
  });
  
  // Clear Selection button
  document.getElementById('clearSelectionBtn')?.addEventListener('click', () => {
    clearSelection();
  });
  
  // Modal: Cancel
  document.getElementById('cancelBulkApply')?.addEventListener('click', () => {
    hideBulkApplyModal();
  });
  
  // Modal: Confirm Apply
  document.getElementById('confirmBulkApply')?.addEventListener('click', () => {
    executeBulkApply();
  });
}

// Update bulk actions bar visibility and counts
function updateBulkActionsBar() {
  const bar = document.getElementById('bulkActionsBar');
  const countSpan = document.getElementById('selectedCount');
  const applyBtn = document.getElementById('bulkApplyTemplateBtn');
  
  const count = selectedIssues.size;
  
  if (count > 0) {
    bar.style.display = 'block';
    countSpan.textContent = `${count} selected`;
    applyBtn.disabled = false;
  } else {
    bar.style.display = 'none';
    applyBtn.disabled = true;
  }
}

// Clear all selections
function clearSelection() {
  selectedIssues.clear();
  document.querySelectorAll('.issue-checkbox').forEach(cb => cb.checked = false);
  document.getElementById('selectAllIssues').checked = false;
  updateBulkActionsBar();
}

// Load templates for bulk apply
async function loadTemplatesForBulk() {
  try {
    const response = await fetch('/api/templates?sort=name');
    const data = await response.json();
    allTemplates = data.templates || [];
    
    const select = document.getElementById('bulkTemplateSelect');
    select.innerHTML = '<option value="">Select a template...</option>';
    
    allTemplates.forEach(template => {
      const option = document.createElement('option');
      option.value = template.id;
      option.textContent = `${template.name} (${template.usage_count || 0} uses)`;
      select.appendChild(option);
    });
  } catch (error) {
    console.error('Error loading templates:', error);
  }
}

// Show bulk apply modal
function showBulkApplyModal() {
  const modal = document.getElementById('bulkApplyModal');
  const countSpan = document.getElementById('modalSelectedCount');
  
  countSpan.textContent = selectedIssues.size;
  
  // Reset modal state
  document.getElementById('bulkApplyProgress').classList.add('hidden');
  document.getElementById('bulkApplyResults').classList.add('hidden');
  document.getElementById('bulkTemplateSelect').disabled = false;
  document.getElementById('confirmBulkApply').disabled = false;
  
  modal.classList.remove('hidden');
}

// Hide bulk apply modal
function hideBulkApplyModal() {
  document.getElementById('bulkApplyModal').classList.add('hidden');
}

// Execute bulk apply
async function executeBulkApply() {
  const templateId = document.getElementById('bulkTemplateSelect').value;
  
  if (!templateId) {
    alert('Please select a template');
    return;
  }
  
  const entityIds = Array.from(selectedIssues);
  
  // Show progress
  document.getElementById('bulkApplyProgress').classList.remove('hidden');
  document.getElementById('confirmBulkApply').disabled = true;
  document.getElementById('bulkTemplateSelect').disabled = true;
  
  try {
    const response = await fetch('/api/templates/bulk-apply', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'include',
      body: JSON.stringify({
        templateId: parseInt(templateId),
        entityType: 'issue', // TODO: Detect from current page
        entityIds: entityIds,
        projectId: currentProjectId || 1 // TODO: Get from context
      })
    });
    
    const data = await response.json();
    
    // Show results
    document.getElementById('bulkApplyProgress').classList.add('hidden');
    document.getElementById('bulkApplyResults').classList.remove('hidden');
    document.getElementById('successCount').textContent = data.results.successful;
    document.getElementById('failCount').textContent = data.results.failed;
    
    // Show notification
    if (data.results.failed === 0) {
      showNotification(`✅ Applied template to ${data.results.successful} items`, 'success');
    } else {
      showNotification(
        `⚠️ Applied to ${data.results.successful} items, ${data.results.failed} failed`, 
        'warning'
      );
    }
    
    // Auto-close after 2 seconds if successful
    if (data.results.failed === 0) {
      setTimeout(() => {
        hideBulkApplyModal();
        clearSelection();
        // Reload issues list
        if (typeof loadIssues === 'function') loadIssues();
      }, 2000);
    }
    
  } catch (error) {
    console.error('Bulk apply error:', error);
    alert('Failed to apply template: ' + error.message);
  }
}

// Notification helper (if not already exists)
function showNotification(message, type = 'info') {
  const colors = {
    success: 'bg-green-500',
    warning: 'bg-orange-500',
    error: 'bg-red-500',
    info: 'bg-blue-500'
  };
  
  const notification = document.createElement('div');
  notification.className = `fixed top-4 right-4 ${colors[type]} text-white px-6 py-3 rounded shadow-lg z-50`;
  notification.textContent = message;
  document.body.appendChild(notification);
  
  setTimeout(() => notification.remove(), 3000);
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', () => {
  initBulkActions();
});
```

IMPORTANT INTEGRATION NOTES:

1. **Adapt to existing code structure**: The above is a template - adjust variable names, functions, and selectors to match your existing codebase

2. **Entity type detection**: Replace `entityType: 'issue'` with logic to detect if on issues or action items page

3. **Project ID**: Replace `projectId: currentProjectId || 1` with actual project context

4. **Reload function**: Replace `loadIssues()` with your actual function name for reloading the list

5. **Styling**: Adjust Tailwind classes to match your existing design system

TESTING CHECKLIST:

✅ Checkboxes appear next to each issue
✅ "Select All" checkbox works
✅ Bulk actions bar appears when items selected
✅ Selected count updates correctly
✅ "Apply Template" button opens modal
✅ Template dropdown populates
✅ Apply executes and shows progress
✅ Success/failure counts display
✅ Issues list refreshes after apply
✅ Selections clear after successful apply

COMMIT MESSAGE:
"feat(phase3b): add bulk apply template UI

- Add checkboxes to issues/action items lists
- Add bulk actions bar with Select All
- Add template selection modal
- Add progress indicator during bulk apply
- Show success/failure results
- Auto-refresh list after successful apply
- Clear selections after completion

Completes Phase 3b Feature 3: Bulk Apply Template"

This is a template - Replit Agent will need to adapt it to your existing frontend structure.