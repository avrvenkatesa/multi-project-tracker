Implement Story 2.3.1: Email Notifications for Team Events

OVERVIEW:
Add email notification system to keep users informed of important events: @mentions, assignments, status changes, and project invitations.

STEP 1: Email Service Setup (60 minutes)

Install dependencies:
npm install nodemailer

Create config/email.js:
const nodemailer = require('nodemailer');

// Email transporter configuration
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.GMAIL_USER,
    pass: process.env.GMAIL_APP_PASSWORD
  }
});

// Test connection
transporter.verify((error, success) => {
  if (error) {
    console.error('Email service error:', error);
  } else {
    console.log('Email service ready');
  }
});

// Send email function
async function sendEmail({ to, subject, html, text }) {
  try {
    const info = await transporter.sendMail({
      from: `"${process.env.EMAIL_FROM_NAME || 'Multi-Project Tracker'}" <${process.env.EMAIL_FROM || process.env.GMAIL_USER}>`,
      to,
      subject,
      html,
      text
    });
    console.log('Email sent:', info.messageId);
    return { success: true, messageId: info.messageId };
  } catch (error) {
    console.error('Email send error:', error);
    return { success: false, error: error.message };
  }
}

module.exports = { sendEmail, transporter };

Add to .env:
EMAIL_FROM_NAME=Multi-Project Tracker
GMAIL_USER=your-email@gmail.com
GMAIL_APP_PASSWORD=your-app-password

STEP 2: Database Schema (45 minutes)

Create migration SQL (run via psql):

-- User notification preferences
CREATE TABLE IF NOT EXISTS user_notification_preferences (
  id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  mentions_enabled BOOLEAN DEFAULT true,
  assignments_enabled BOOLEAN DEFAULT true,
  status_changes_enabled BOOLEAN DEFAULT true,
  invitations_enabled BOOLEAN DEFAULT true,
  email_frequency VARCHAR(20) DEFAULT 'immediate' CHECK (email_frequency IN ('immediate', 'daily_digest', 'weekly_digest')),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(user_id)
);

CREATE INDEX idx_user_notification_prefs_user ON user_notification_preferences(user_id);

-- Unsubscribe tokens
CREATE TABLE IF NOT EXISTS unsubscribe_tokens (
  id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  token VARCHAR(64) UNIQUE NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  used_at TIMESTAMP
);

CREATE INDEX idx_unsubscribe_tokens_token ON unsubscribe_tokens(token);
CREATE INDEX idx_unsubscribe_tokens_user ON unsubscribe_tokens(user_id);

Run: psql $DATABASE_URL -f migrations/email_notifications.sql

STEP 3: Email Templates (60 minutes)

Create templates/emails/ directory with these files:

1. templates/emails/mention.html:
HTML template for @mention notifications
Include: who mentioned, in which item, comment preview, link to item

2. templates/emails/assignment.html:
HTML template for new assignments
Include: item title, project name, due date, priority, link to item

3. templates/emails/status-change.html:
HTML template for status updates
Include: item title, old status, new status, who changed it, link to item

4. templates/emails/invitation.html:
HTML template for project invitations
Include: project name, inviter name, role offered, accept/decline links

5. templates/emails/invitation-response.html:
HTML template for invitation responses
Include: who responded, accepted/declined, project name

All templates should include:
- Multi-Project Tracker header with blue branding
- Clear call-to-action button
- Unsubscribe link at bottom
- Plain text fallback version

Template helper function in utils/emailTemplates.js:
function renderTemplate(templateName, data) {
  // Load HTML template
  // Replace {{variables}} with data
  // Generate plain text version
  // Add unsubscribe link
  return { html, text };
}

STEP 4: Notification Service Module (30 minutes)

Create services/notificationService.js:

const { sendEmail } = require('../config/email');
const { renderTemplate } = require('../utils/emailTemplates');
const crypto = require('crypto');

class NotificationService {
  
  // Check if user has notifications enabled
  async canSendNotification(userId, notificationType) {
    const prefs = await pool.query(
      'SELECT * FROM user_notification_preferences WHERE user_id = $1',
      [userId]
    );
    
    if (!prefs.rows[0]) return true; // Default: enabled
    
    const enabled = prefs.rows[0][`${notificationType}_enabled`];
    return enabled !== false;
  }
  
  // Generate unsubscribe token
  async generateUnsubscribeToken(userId) {
    const token = crypto.randomBytes(32).toString('hex');
    await pool.query(
      'INSERT INTO unsubscribe_tokens (user_id, token) VALUES ($1, $2)',
      [userId, token]
    );
    return token;
  }
  
  // Send mention notification
  async sendMentionNotification({ mentionedUserId, mentionerName, itemTitle, itemType, itemId, projectId, commentPreview }) {
    if (!await this.canSendNotification(mentionedUserId, 'mentions')) return;
    
    const user = await this.getUserEmail(mentionedUserId);
    const unsubscribeToken = await this.generateUnsubscribeToken(mentionedUserId);
    
    const { html, text } = renderTemplate('mention', {
      mentionerName,
      itemTitle,
      itemType,
      commentPreview,
      itemLink: `${process.env.APP_URL}/project.html?id=${projectId}`,
      unsubscribeLink: `${process.env.APP_URL}/api/notifications/unsubscribe/${unsubscribeToken}`
    });
    
    await sendEmail({
      to: user.email,
      subject: `${mentionerName} mentioned you in ${itemType}`,
      html,
      text
    });
  }
  
  // Send assignment notification
  async sendAssignmentNotification({ assignedUserId, assignerName, itemTitle, itemType, itemId, projectId, dueDate, priority }) {
    if (!await this.canSendNotification(assignedUserId, 'assignments')) return;
    
    const user = await this.getUserEmail(assignedUserId);
    const unsubscribeToken = await this.generateUnsubscribeToken(assignedUserId);
    
    const { html, text } = renderTemplate('assignment', {
      assignerName,
      itemTitle,
      itemType,
      dueDate,
      priority,
      itemLink: `${process.env.APP_URL}/project.html?id=${projectId}`,
      unsubscribeLink: `${process.env.APP_URL}/api/notifications/unsubscribe/${unsubscribeToken}`
    });
    
    await sendEmail({
      to: user.email,
      subject: `New ${itemType} assigned: ${itemTitle}`,
      html,
      text
    });
  }
  
  // Send status change notification
  async sendStatusChangeNotification({ assignedUserId, itemTitle, itemType, oldStatus, newStatus, changedByName, projectId }) {
    if (!await this.canSendNotification(assignedUserId, 'status_changes')) return;
    
    const user = await this.getUserEmail(assignedUserId);
    const unsubscribeToken = await this.generateUnsubscribeToken(assignedUserId);
    
    const { html, text } = renderTemplate('status-change', {
      changedByName,
      itemTitle,
      oldStatus,
      newStatus,
      itemLink: `${process.env.APP_URL}/project.html?id=${projectId}`,
      unsubscribeLink: `${process.env.APP_URL}/api/notifications/unsubscribe/${unsubscribeToken}`
    });
    
    await sendEmail({
      to: user.email,
      subject: `Status changed: ${itemTitle}`,
      html,
      text
    });
  }
  
  // Send invitation notification
  async sendInvitationNotification({ inviteeEmail, inviterName, projectName, role, invitationToken }) {
    const { html, text } = renderTemplate('invitation', {
      inviterName,
      projectName,
      role,
      acceptLink: `${process.env.APP_URL}/api/invitations/${invitationToken}/accept`,
      declineLink: `${process.env.APP_URL}/api/invitations/${invitationToken}/decline`
    });
    
    await sendEmail({
      to: inviteeEmail,
      subject: `You've been invited to join ${projectName}`,
      html,
      text
    });
  }
  
  async getUserEmail(userId) {
    const result = await pool.query('SELECT email FROM users WHERE id = $1', [userId]);
    return result.rows[0];
  }
}

module.exports = new NotificationService();

STEP 5: Integration with Existing Features (90 minutes)

A. Comments System Integration:
In the POST comment endpoints, after saving comment:
- Parse comment text for @mentions
- For each mentioned user:
  - Call notificationService.sendMentionNotification()

B. Team Management Integration:
In POST /api/projects/:projectId/team/invite endpoint:
- After creating invitation, call notificationService.sendInvitationNotification()

In POST /api/invitations/:token/accept endpoint:
- After acceptance, notify inviter of acceptance

C. Status Change Integration:
In PATCH/PUT endpoints that update status:
- Get old status from database
- After update, if status changed and item is assigned:
  - Call notificationService.sendStatusChangeNotification()

D. Assignment Integration:
In endpoints that assign items to users:
- After assignment, call notificationService.sendAssignmentNotification()

STEP 6: API Endpoints (45 minutes)

Add to server.js:

// Get user notification preferences
app.get('/api/notifications/preferences', authenticateToken, async (req, res) => {
  try {
    const result = await pool.query(
      'SELECT * FROM user_notification_preferences WHERE user_id = $1',
      [req.user.id]
    );
    
    if (result.rows.length === 0) {
      // Return defaults
      return res.json({
        mentions_enabled: true,
        assignments_enabled: true,
        status_changes_enabled: true,
        invitations_enabled: true,
        email_frequency: 'immediate'
      });
    }
    
    res.json(result.rows[0]);
  } catch (error) {
    console.error('Error fetching preferences:', error);
    res.status(500).json({ error: 'Failed to fetch preferences' });
  }
});

// Update notification preferences
app.put('/api/notifications/preferences', authenticateToken, async (req, res) => {
  try {
    const { mentions_enabled, assignments_enabled, status_changes_enabled, invitations_enabled, email_frequency } = req.body;
    
    await pool.query(`
      INSERT INTO user_notification_preferences 
      (user_id, mentions_enabled, assignments_enabled, status_changes_enabled, invitations_enabled, email_frequency)
      VALUES ($1, $2, $3, $4, $5, $6)
      ON CONFLICT (user_id) 
      DO UPDATE SET 
        mentions_enabled = $2,
        assignments_enabled = $3,
        status_changes_enabled = $4,
        invitations_enabled = $5,
        email_frequency = $6,
        updated_at = CURRENT_TIMESTAMP
    `, [req.user.id, mentions_enabled, assignments_enabled, status_changes_enabled, invitations_enabled, email_frequency]);
    
    res.json({ success: true, message: 'Preferences updated' });
  } catch (error) {
    console.error('Error updating preferences:', error);
    res.status(500).json({ error: 'Failed to update preferences' });
  }
});

// Unsubscribe
app.post('/api/notifications/unsubscribe/:token', async (req, res) => {
  try {
    const { token } = req.params;
    
    const result = await pool.query(
      'SELECT user_id FROM unsubscribe_tokens WHERE token = $1 AND used_at IS NULL',
      [token]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).send('Invalid or expired unsubscribe link');
    }
    
    const userId = result.rows[0].user_id;
    
    // Disable all notifications
    await pool.query(`
      INSERT INTO user_notification_preferences 
      (user_id, mentions_enabled, assignments_enabled, status_changes_enabled, invitations_enabled)
      VALUES ($1, false, false, false, false)
      ON CONFLICT (user_id) 
      DO UPDATE SET 
        mentions_enabled = false,
        assignments_enabled = false,
        status_changes_enabled = false,
        invitations_enabled = false
    `, [userId]);
    
    // Mark token as used
    await pool.query(
      'UPDATE unsubscribe_tokens SET used_at = CURRENT_TIMESTAMP WHERE token = $1',
      [token]
    );
    
    res.send('You have been unsubscribed from all email notifications.');
  } catch (error) {
    console.error('Unsubscribe error:', error);
    res.status(500).send('Failed to unsubscribe');
  }
});

STEP 7: Frontend Preferences Page (60 minutes)

Create public/notification-settings.html:
- Page with notification preferences form
- Toggle switches for each notification type
- Email frequency dropdown
- Save button
- Test email button

Create public/js/pages/notificationSettings.js:
- Load current preferences
- Save preferences on form submit
- Send test email functionality

Add navigation link to user menu dropdown

TESTING CHECKLIST:
- Send test @mention and verify email received
- Assign item to user and verify email
- Change status and verify email
- Send project invitation and verify email
- Accept invitation and verify inviter gets email
- Update preferences and verify respected
- Click unsubscribe and verify all emails stop
- Test with Gmail/SendGrid/SES

DELIVERABLES:
1. Email service configuration
2. 2 new database tables
3. Email templates (5 files)
4. Notification service module
5. Integration with 4 existing features
6. 3 API endpoints
7. Frontend preferences page
8. Documentation for email setup

Begin implementation.