CONTEXT:
I'm implementing a Checklist System for the Multi-Project Tracker application. This is Phase 1 of 4. The application uses:
- Neon PostgreSQL database (raw SQL, NOT ORM)
- Cookie-based JWT authentication
- Node.js/Express backend
- Vanilla JavaScript frontend

PROJECT: S4Carlisle Cloud Migration
FIRST USE CASE: Access Verification Checklist (100+ items, 10 sections)

TASK:
Create the database schema for the checklist system with 7 tables and seed the Access Verification template.

REQUIREMENTS:

1. CREATE 7 TABLES:
```sql
-- Checklist Templates (reusable across projects)
CREATE TABLE checklist_templates (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  category VARCHAR(100), -- 'access-verification', 'security-audit', 'migration-readiness'
  icon VARCHAR(50),
  is_active BOOLEAN DEFAULT true,
  is_system BOOLEAN DEFAULT false,
  created_by INTEGER REFERENCES users(id),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Template Sections (hierarchical structure)
CREATE TABLE checklist_template_sections (
  id SERIAL PRIMARY KEY,
  template_id INTEGER NOT NULL REFERENCES checklist_templates(id) ON DELETE CASCADE,
  parent_section_id INTEGER REFERENCES checklist_template_sections(id),
  title VARCHAR(255) NOT NULL,
  description TEXT,
  section_number VARCHAR(20), -- '1', '1.1', '1.1.1'
  display_order INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Template Items (actual checklist items)
CREATE TABLE checklist_template_items (
  id SERIAL PRIMARY KEY,
  section_id INTEGER NOT NULL REFERENCES checklist_template_sections(id) ON DELETE CASCADE,
  item_text TEXT NOT NULL,
  field_type VARCHAR(50) NOT NULL, -- 'checkbox', 'text', 'textarea', 'date', 'dropdown', 'radio'
  field_options TEXT, -- JSON array for dropdowns/radios
  is_required BOOLEAN DEFAULT false,
  help_text TEXT,
  display_order INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Checklist Instances (actual checklists being filled out)
CREATE TABLE checklists (
  id SERIAL PRIMARY KEY,
  checklist_id VARCHAR(20) UNIQUE NOT NULL, -- 'CHK-001'
  template_id INTEGER NOT NULL REFERENCES checklist_templates(id),
  project_id INTEGER NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
  
  title VARCHAR(255) NOT NULL,
  description TEXT,
  status VARCHAR(50) DEFAULT 'not-started', -- not-started, in-progress, completed, approved
  
  -- Optional relationships
  related_issue_id INTEGER REFERENCES issues(id),
  related_action_id INTEGER REFERENCES action_items(id),
  
  -- Ownership & dates
  assigned_to INTEGER REFERENCES users(id),
  due_date DATE,
  started_at TIMESTAMP,
  completed_at TIMESTAMP,
  approved_at TIMESTAMP,
  approved_by INTEGER REFERENCES users(id),
  
  -- Progress tracking
  total_items INTEGER DEFAULT 0,
  completed_items INTEGER DEFAULT 0,
  completion_percentage INTEGER GENERATED ALWAYS AS 
    (CASE WHEN total_items > 0 THEN (completed_items * 100 / total_items) ELSE 0 END) STORED,
  
  created_by INTEGER REFERENCES users(id),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Checklist Responses (filled-out values)
CREATE TABLE checklist_responses (
  id SERIAL PRIMARY KEY,
  checklist_id INTEGER NOT NULL REFERENCES checklists(id) ON DELETE CASCADE,
  template_item_id INTEGER NOT NULL REFERENCES checklist_template_items(id),
  
  response_value TEXT,
  response_date DATE,
  response_boolean BOOLEAN,
  notes TEXT,
  
  is_completed BOOLEAN DEFAULT false,
  completed_by INTEGER REFERENCES users(id),
  completed_at TIMESTAMP,
  
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  
  UNIQUE(checklist_id, template_item_id)
);

-- Checklist Comments
CREATE TABLE checklist_comments (
  id SERIAL PRIMARY KEY,
  checklist_id INTEGER NOT NULL REFERENCES checklists(id) ON DELETE CASCADE,
  response_id INTEGER REFERENCES checklist_responses(id),
  
  comment TEXT NOT NULL,
  created_by INTEGER REFERENCES users(id),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Checklist Sign-offs
CREATE TABLE checklist_signoffs (
  id SERIAL PRIMARY KEY,
  checklist_id INTEGER NOT NULL REFERENCES checklists(id) ON DELETE CASCADE,
  
  role VARCHAR(100) NOT NULL,
  signed_by INTEGER REFERENCES users(id),
  signed_at TIMESTAMP,
  signature TEXT,
  comments TEXT,
  
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEXES:

sqlCREATE INDEX idx_checklists_project ON checklists(project_id);
CREATE INDEX idx_checklists_status ON checklists(status);
CREATE INDEX idx_checklists_assigned ON checklists(assigned_to);
CREATE INDEX idx_responses_checklist ON checklist_responses(checklist_id);
CREATE INDEX idx_template_sections_template ON checklist_template_sections(template_id);
CREATE INDEX idx_template_items_section ON checklist_template_items(section_id);

SEED ACCESS VERIFICATION TEMPLATE:

Create a template with these 10 main sections:

Server Access Verification (sections 1.1-1.6)
Access Methods Verification (sections 2.1-2.5)
Administrative Credentials Verification (sections 3.1-3.5)
Access Level Verification (sections 4.1-4.4)
Security Requirements Verification (sections 5.1-5.5)
Documentation Access Verification (sections 6.1-6.6)
Validation Tasks (sections 7.1-7.5)
Security Considerations (sections 8.1-8.5)
Deliverables (sections 9.1-9.4)
Sign-Off & Approval (section 10)

Sample items for Section 1.1 (Pathfinder Application Servers):

Server 1 hostname/IP (text field)
Administrative access confirmed (checkbox)
RDP connectivity tested (checkbox)
Local admin credentials validated (checkbox)
Access level: Read/Write/Admin (radio buttons)
Tested by (text field)
Date (date field)
Issues/Notes (textarea)


VERIFICATION QUERIES:

After seeding, run these queries to verify:
sql-- Count templates
SELECT COUNT(*) FROM checklist_templates;

-- Count sections for Access Verification template
SELECT COUNT(*) FROM checklist_template_sections WHERE template_id = 1;

-- Count items for Access Verification template
SELECT 
  cts.title AS section_title,
  COUNT(cti.id) AS item_count
FROM checklist_template_sections cts
LEFT JOIN checklist_template_items cti ON cts.id = cti.section_id
WHERE cts.template_id = 1
GROUP BY cts.title
ORDER BY cts.display_order;

-- Total items
SELECT COUNT(*) FROM checklist_template_items 
WHERE section_id IN (
  SELECT id FROM checklist_template_sections WHERE template_id = 1
);
CRITICAL REQUIREMENTS:

Use raw SQL only (NO ORM)
Use parameterized queries to prevent SQL injection
Ensure all foreign keys are properly set
GENERATED column for completion_percentage
Proper CASCADE deletes

OUTPUT:

Confirmation that all 7 tables were created
Confirmation that all indexes were created
Confirmation that Access Verification template was seeded
Results of verification queries showing:

1 template created
10+ sections created
70+ items created (can start with subset)


Sample query showing template structure

Let me know when database setup is complete!