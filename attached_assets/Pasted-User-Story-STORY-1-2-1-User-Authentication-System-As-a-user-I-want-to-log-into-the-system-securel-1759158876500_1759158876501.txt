User Story: [STORY 1.2.1] User Authentication System
As a user
I want to log into the system securely
So that I can access project information with proper security controls

Replit Development Prompt
1. Install Required Dependencies
bash# Install authentication dependencies
npm install bcryptjs jsonwebtoken cookie-parser
2. Create Authentication Backend
File: server.js - Add authentication infrastructure:
javascriptconst express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cookieParser = require('cookie-parser');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// JWT Secret (in production, use environment variable)
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';
const JWT_EXPIRY = '24h';

// Security middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com", "https://cdn.tailwindcss.com"],
      fontSrc: ["'self'", "https://fonts.gstatic.com"],
      scriptSrc: ["'self'", "'unsafe-inline'", "https://cdn.tailwindcss.com", "https://unpkg.com"],
      imgSrc: ["'self'", "data:", "https:"],
    },
  },
}));

app.use(cors({
  origin: true,
  credentials: true
}));
app.use(cookieParser());

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: 'Too many requests from this IP, please try again later.'
});
app.use('/api/', limiter);

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Serve static files
app.use(express.static(path.join(__dirname, 'public')));

// In-memory data stores
let projects = [];
let issues = [];
let actionItems = [];

// Users data store with demo users
let users = [
  {
    id: 1,
    name: 'Demo User',
    email: 'demo@multiproject.com',
    password: bcrypt.hashSync('demo123', 10), // Hashed password
    role: 'Project Manager',
    createdAt: new Date().toISOString()
  },
  {
    id: 2,
    name: 'Gajalakshmi Vaasan',
    email: 'gajalakshmi@1cloudhub.com',
    password: bcrypt.hashSync('demo123', 10),
    role: 'Project Manager',
    createdAt: new Date().toISOString()
  },
  {
    id: 3,
    name: 'Srihari S',
    email: 'srihari@1cloudhub.com',
    password: bcrypt.hashSync('demo123', 10),
    role: 'Solution Architect',
    createdAt: new Date().toISOString()
  }
];

// Authentication Middleware
function authenticateToken(req, res, next) {
  const token = req.cookies.token || req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ error: 'Access token required' });
  }
  
  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(403).json({ error: 'Invalid or expired token' });
  }
}

// Optional authentication (doesn't fail if no token)
function optionalAuth(req, res, next) {
  const token = req.cookies.token || req.headers.authorization?.split(' ')[1];
  
  if (token) {
    try {
      const decoded = jwt.verify(token, JWT_SECRET);
      req.user = decoded;
    } catch (error) {
      // Invalid token, but continue anyway
      req.user = null;
    }
  } else {
    req.user = null;
  }
  
  next();
}

// ==================== AUTH ENDPOINTS ====================

// Register new user
app.post('/api/auth/register', async (req, res) => {
  const { name, email, password, role } = req.body;
  
  // Validation
  if (!name || !email || !password) {
    return res.status(400).json({ error: 'Name, email, and password are required' });
  }
  
  // Check if user already exists
  const existingUser = users.find(u => u.email.toLowerCase() === email.toLowerCase());
  if (existingUser) {
    return res.status(400).json({ error: 'User with this email already exists' });
  }
  
  // Hash password
  const hashedPassword = await bcrypt.hash(password, 10);
  
  // Create new user
  const newUser = {
    id: users.length + 1,
    name: name.trim(),
    email: email.toLowerCase().trim(),
    password: hashedPassword,
    role: role || 'Team Member',
    createdAt: new Date().toISOString()
  };
  
  users.push(newUser);
  
  // Generate token
  const token = jwt.sign(
    { id: newUser.id, email: newUser.email, name: newUser.name, role: newUser.role },
    JWT_SECRET,
    { expiresIn: JWT_EXPIRY }
  );
  
  // Set cookie
  res.cookie('token', token, {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    maxAge: 24 * 60 * 60 * 1000 // 24 hours
  });
  
  // Return user data (without password)
  const { password: _, ...userWithoutPassword } = newUser;
  res.status(201).json({
    user: userWithoutPassword,
    token
  });
});

// Login
app.post('/api/auth/login', async (req, res) => {
  const { email, password } = req.body;
  
  // Validation
  if (!email || !password) {
    return res.status(400).json({ error: 'Email and password are required' });
  }
  
  // Find user
  const user = users.find(u => u.email.toLowerCase() === email.toLowerCase());
  if (!user) {
    return res.status(401).json({ error: 'Invalid email or password' });
  }
  
  // Check password
  const isValidPassword = await bcrypt.compare(password, user.password);
  if (!isValidPassword) {
    return res.status(401).json({ error: 'Invalid email or password' });
  }
  
  // Generate token
  const token = jwt.sign(
    { id: user.id, email: user.email, name: user.name, role: user.role },
    JWT_SECRET,
    { expiresIn: JWT_EXPIRY }
  );
  
  // Set cookie
  res.cookie('token', token, {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    maxAge: 24 * 60 * 60 * 1000
  });
  
  // Return user data
  const { password: _, ...userWithoutPassword } = user;
  res.json({
    user: userWithoutPassword,
    token
  });
});

// Logout
app.post('/api/auth/logout', (req, res) => {
  res.clearCookie('token');
  res.json({ message: 'Logged out successfully' });
});

// Get current user
app.get('/api/auth/me', authenticateToken, (req, res) => {
  const user = users.find(u => u.id === req.user.id);
  if (!user) {
    return res.status(404).json({ error: 'User not found' });
  }
  
  const { password: _, ...userWithoutPassword } = user;
  res.json(userWithoutPassword);
});

// ==================== EXISTING ENDPOINTS ====================
// Update existing endpoints to use optional auth

app.get('/api/health', optionalAuth, (req, res) => {
  res.json({ 
    status: 'OK',
    message: 'Multi-Project Tracker API is running',
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    user: req.user ? req.user.name : 'Not authenticated',
    features: [
      'Multi-project support',
      'Issue tracking',
      'Action item management',
      'User authentication',
      'Drag-and-drop Kanban',
      'AI integration ready'
    ]
  });
});

// Projects API - require authentication for modifications
app.get('/api/projects', optionalAuth, (req, res) => {
  res.json(projects);
});

app.post('/api/projects', authenticateToken, (req, res) => {
  const { name, description, template } = req.body;
  const newProject = {
    id: Date.now(),
    name,
    description,
    template: template || 'generic',
    createdAt: new Date().toISOString(),
    createdBy: req.user.name,
    status: 'active',
    categories: getDefaultCategories(template),
    phases: getDefaultPhases(template),
    components: getDefaultComponents(template)
  };
  projects.push(newProject);
  res.status(201).json(newProject);
});

// Issues API - require authentication
app.get('/api/issues', optionalAuth, (req, res) => {
  const { projectId, status, priority, assignee, category } = req.query;
  
  let filteredIssues = [...issues];
  
  if (projectId) {
    filteredIssues = filteredIssues.filter(issue => issue.projectId == projectId);
  }
  
  if (status) {
    filteredIssues = filteredIssues.filter(issue => issue.status === status);
  }
  
  if (priority) {
    filteredIssues = filteredIssues.filter(issue => issue.priority === priority);
  }
  
  if (assignee) {
    filteredIssues = filteredIssues.filter(issue => issue.assignee === assignee);
  }
  
  if (category) {
    filteredIssues = filteredIssues.filter(issue => issue.category === category);
  }
  
  res.json(filteredIssues);
});

app.post('/api/issues', authenticateToken, (req, res) => {
  const { 
    title, 
    description, 
    priority, 
    category, 
    phase, 
    component, 
    assignee, 
    dueDate, 
    projectId,
    type = 'issue'
  } = req.body;
  
  if (!title || !projectId) {
    return res.status(400).json({ error: 'Title and Project ID are required' });
  }
  
  const project = projects.find(p => p.id == projectId);
  if (!project) {
    return res.status(404).json({ error: 'Project not found' });
  }
  
  const newIssue = {
    id: Date.now(),
    title: title.trim(),
    description: description?.trim() || '',
    priority: priority || 'medium',
    category: category || 'General',
    phase: phase || project.phases[0],
    component: component || project.components[0],
    assignee: assignee || '',
    dueDate: dueDate || null,
    projectId: parseInt(projectId),
    type,
    status: 'To Do',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    createdBy: req.user.name
  };
  
  issues.push(newIssue);
  res.status(201).json(newIssue);
});

app.patch('/api/issues/:id', authenticateToken, (req, res) => {
  const { id } = req.params;
  const { status } = req.body;
  
  const issue = issues.find(item => item.id == id);
  
  if (!issue) {
    return res.status(404).json({ error: 'Issue not found' });
  }
  
  const validStatuses = ['To Do', 'In Progress', 'Blocked', 'Done'];
  if (status && !validStatuses.includes(status)) {
    return res.status(400).json({ error: 'Invalid status' });
  }
  
  if (status) {
    issue.status = status;
    issue.updatedAt = new Date().toISOString();
    issue.updatedBy = req.user.name;
  }
  
  res.json(issue);
});

// Action Items API - similar pattern
app.get('/api/action-items', optionalAuth, (req, res) => {
  const { projectId, status, assignee, isDeliverable } = req.query;
  
  let filtered = [...actionItems];
  
  if (projectId) {
    filtered = filtered.filter(item => item.projectId == projectId);
  }
  
  if (status) {
    filtered = filtered.filter(item => item.status === status);
  }
  
  if (assignee) {
    filtered = filtered.filter(item => item.assignee === assignee);
  }
  
  if (isDeliverable === 'true') {
    filtered = filtered.filter(item => item.isDeliverable === true);
  }
  
  res.json(filtered);
});

app.post('/api/action-items', authenticateToken, (req, res) => {
  const { 
    title, 
    description, 
    priority, 
    category, 
    phase, 
    component, 
    assignee, 
    dueDate, 
    progress = 0,
    milestone,
    isDeliverable = false,
    projectId
  } = req.body;
  
  if (!title || !projectId) {
    return res.status(400).json({ error: 'Title and Project ID are required' });
  }
  
  const project = projects.find(p => p.id == projectId);
  if (!project) {
    return res.status(404).json({ error: 'Project not found' });
  }
  
  const validProgress = Math.max(0, Math.min(100, parseInt(progress) || 0));
  
  const newActionItem = {
    id: Date.now(),
    title: title.trim(),
    description: description?.trim() || '',
    priority: priority || 'medium',
    category: category || 'General',
    phase: phase || project.phases[0],
    component: component || project.components[0],
    assignee: assignee || '',
    dueDate: dueDate || null,
    progress: validProgress,
    milestone: milestone?.trim() || '',
    isDeliverable: Boolean(isDeliverable),
    projectId: parseInt(projectId),
    type: 'action-item',
    status: validProgress === 100 ? 'Done' : (validProgress > 0 ? 'In Progress' : 'To Do'),
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    createdBy: req.user.name
  };
  
  actionItems.push(newActionItem);
  res.status(201).json(newActionItem);
});

app.patch('/api/action-items/:id', authenticateToken, (req, res) => {
  const { id } = req.params;
  const { status, progress } = req.body;
  
  const actionItem = actionItems.find(item => item.id == id);
  
  if (!actionItem) {
    return res.status(404).json({ error: 'Action item not found' });
  }
  
  const validStatuses = ['To Do', 'In Progress', 'Blocked', 'Done'];
  if (status && !validStatuses.includes(status)) {
    return res.status(400).json({ error: 'Invalid status' });
  }
  
  if (status) {
    actionItem.status = status;
    
    if (status === 'Done' && actionItem.progress < 100) {
      actionItem.progress = 100;
    } else if (status === 'To Do' && actionItem.progress > 0) {
      actionItem.progress = 0;
    }
  }
  
  if (progress !== undefined) {
    const validProgress = Math.max(0, Math.min(100, parseInt(progress) || 0));
    actionItem.progress = validProgress;
    
    if (validProgress === 100 && actionItem.status !== 'Done') {
      actionItem.status = 'Done';
    } else if (validProgress > 0 && validProgress < 100 && actionItem.status !== 'In Progress') {
      actionItem.status = 'In Progress';
    } else if (validProgress === 0 && actionItem.status !== 'To Do') {
      actionItem.status = 'To Do';
    }
  }
  
  actionItem.updatedAt = new Date().toISOString();
  actionItem.updatedBy = req.user.name;
  
  res.json(actionItem);
});

// Users API
app.get('/api/users', authenticateToken, (req, res) => {
  const usersWithoutPasswords = users.map(({ password, ...user }) => user);
  res.json(usersWithoutPasswords);
});

// Helper functions (keep existing)
function getDefaultCategories(template) {
  const templates = {
    'cloud-migration': ['Technical', 'Security', 'Network', 'Data Migration', 'Testing', 'Documentation'],
    'software-development': ['Bug', 'Feature', 'Enhancement', 'Documentation', 'Testing', 'DevOps'],
    'infrastructure': ['Hardware', 'Network', 'Security', 'Monitoring', 'Backup', 'Maintenance'],
    'generic': ['Technical', 'Process', 'Communication', 'Resource', 'Risk', 'Documentation']
  };
  return templates[template] || templates['generic'];
}

function getDefaultPhases(template) {
  const templates = {
    'cloud-migration': ['Assessment', 'Planning', 'Migration', 'Testing', 'Optimization', 'Hypercare'],
    'software-development': ['Requirements', 'Design', 'Development', 'Testing', 'Deployment', 'Maintenance'],
    'infrastructure': ['Planning', 'Procurement', 'Installation', 'Configuration', 'Testing', 'Production'],
    'generic': ['Planning', 'Execution', 'Testing', 'Deployment', 'Closure']
  };
  return templates[template] || templates['generic'];
}

function getDefaultComponents(template) {
  const templates = {
    'cloud-migration': ['Application', 'Database', 'Storage', 'Network', 'Security', 'Monitoring'],
    'software-development': ['Frontend', 'Backend', 'Database', 'API', 'UI/UX', 'Testing'],
    'infrastructure': ['Servers', 'Network', 'Storage', 'Security', 'Monitoring', 'Backup'],
    'generic': ['Component A', 'Component B', 'Component C', 'Integration', 'Documentation']
  };
  return templates[template] || templates['generic'];
}

// Serve React app
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Error handling
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    message: 'Something went wrong!',
    error: process.env.NODE_ENV === 'production' ? {} : err.message
  });
});

app.listen(PORT, () => {
  console.log(`🚀 Multi-Project Tracker running on port ${PORT}`);
  console.log(`📊 Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`🔗 Health Check: http://localhost:${PORT}/api/health`);
  console.log(`\n📋 API Endpoints:`);
  console.log(`   POST /api/auth/register - Register new user`);
  console.log(`   POST /api/auth/login - User login`);
  console.log(`   POST /api/auth/logout - User logout`);
  console.log(`   GET  /api/auth/me - Get current user`);
  console.log(`   GET  /api/projects`);
  console.log(`   POST /api/projects (requires auth)`);
  console.log(`   GET  /api/issues`);
  console.log(`   POST /api/issues (requires auth)`);
  console.log(`   GET  /api/action-items`);
  console.log(`   POST /api/action-items (requires auth)`);
  console.log(`   GET  /api/users (requires auth)`);
  console.log(`\n🔐 Demo Users:`);
  console.log(`   Email: demo@multiproject.com | Password: demo123`);
  console.log(`   Email: gajalakshmi@1cloudhub.com | Password: demo123`);
  console.log(`   Email: srihari@1cloudhub.com | Password: demo123`);
});