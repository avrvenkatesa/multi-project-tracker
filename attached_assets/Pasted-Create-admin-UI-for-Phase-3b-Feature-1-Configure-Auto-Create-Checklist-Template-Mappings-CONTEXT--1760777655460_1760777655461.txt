Create admin UI for Phase 3b Feature 1: Configure Auto-Create Checklist Template Mappings

CONTEXT:
- Backend complete (Prompts 1-3)
- Working on branch: feature/checklist-system-phase3
- Need admin interface to configure issue type → template and action category → template mappings
- Similar to existing template library UI

TASK:
Create new admin page for configuring template auto-creation mappings

IMPLEMENTATION:

File 1: public/template-mappings.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Template Auto-Creation Settings - Multi-Project Tracker</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="/css/templates.css">
</head>
<body class="bg-gray-50">
  <!-- Navigation -->
  <nav class="bg-blue-600 text-white p-4">
    <div class="container mx-auto flex justify-between items-center">
      <div class="flex items-center gap-4">
        <h1 class="text-xl font-bold">Multi-Project Tracker</h1>
        <span class="text-blue-200">Template Auto-Creation Settings</span>
      </div>
      <div class="flex gap-4">
        <a href="/templates" class="hover:text-blue-200">Template Library</a>
        <a href="/" class="hover:text-blue-200">Dashboard</a>
      </div>
    </div>
  </nav>

  <div class="container mx-auto p-6 max-w-6xl">
    <!-- Header -->
    <div class="mb-6">
      <h2 class="text-2xl font-bold text-gray-800 mb-2">Auto-Create Checklist Settings</h2>
      <p class="text-gray-600">Configure which templates automatically create checklists when issues or action items are created</p>
    </div>

    <!-- Project Filter -->
    <div class="bg-white rounded-lg shadow p-4 mb-6">
      <label class="block text-sm font-medium text-gray-700 mb-2">Filter by Project:</label>
      <select id="projectFilter" class="w-full p-2 border rounded">
        <option value="">Global Settings (All Projects)</option>
      </select>
    </div>

    <!-- Tabs -->
    <div class="mb-4 border-b border-gray-200">
      <nav class="flex gap-4">
        <button id="issueTypesTab" class="tab-button active px-4 py-2 font-medium border-b-2 border-blue-500 text-blue-600">
          Issue Types
        </button>
        <button id="actionCategoriesTab" class="tab-button px-4 py-2 font-medium text-gray-500 hover:text-gray-700">
          Action Item Categories
        </button>
      </nav>
    </div>

    <!-- Issue Types Panel -->
    <div id="issueTypesPanel" class="tab-panel">
      <div class="bg-white rounded-lg shadow p-6 mb-6">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold">Issue Type → Template Mappings</h3>
          <button id="addIssueTypeMapping" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
            + Add Mapping
          </button>
        </div>
        
        <div id="issueTypeMappingsList" class="space-y-3">
          <!-- Dynamically populated -->
        </div>
      </div>
    </div>

    <!-- Action Categories Panel -->
    <div id="actionCategoriesPanel" class="tab-panel hidden">
      <div class="bg-white rounded-lg shadow p-6 mb-6">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold">Action Category → Template Mappings</h3>
          <button id="addActionCategoryMapping" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
            + Add Mapping
          </button>
        </div>
        
        <div id="actionCategoryMappingsList" class="space-y-3">
          <!-- Dynamically populated -->
        </div>
      </div>
    </div>
  </div>

  <!-- Add Issue Type Mapping Modal -->
  <div id="addIssueTypeMappingModal" class="modal hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 max-w-md w-full">
      <h3 class="text-xl font-bold mb-4">Add Issue Type Mapping</h3>
      <form id="addIssueTypeMappingForm">
        <div class="mb-4">
          <label class="block text-sm font-medium mb-2">Issue Type</label>
          <input type="text" id="issueTypeInput" class="w-full p-2 border rounded" placeholder="e.g., Bug, Feature, Task" required>
        </div>
        <div class="mb-4">
          <label class="block text-sm font-medium mb-2">Template</label>
          <select id="issueTemplateSelect" class="w-full p-2 border rounded" required>
            <option value="">Select template...</option>
          </select>
        </div>
        <div class="flex gap-2 justify-end">
          <button type="button" class="cancel-modal px-4 py-2 text-gray-600 hover:bg-gray-100 rounded">Cancel</button>
          <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Save Mapping</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Add Action Category Mapping Modal -->
  <div id="addActionCategoryMappingModal" class="modal hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 max-w-md w-full">
      <h3 class="text-xl font-bold mb-4">Add Action Category Mapping</h3>
      <form id="addActionCategoryMappingForm">
        <div class="mb-4">
          <label class="block text-sm font-medium mb-2">Action Item Category</label>
          <select id="actionCategorySelect" class="w-full p-2 border rounded" required>
            <option value="">Select category...</option>
          </select>
        </div>
        <div class="mb-4">
          <label class="block text-sm font-medium mb-2">Template</label>
          <select id="actionTemplateSelect" class="w-full p-2 border rounded" required>
            <option value="">Select template...</option>
          </select>
        </div>
        <div class="flex gap-2 justify-end">
          <button type="button" class="cancel-modal px-4 py-2 text-gray-600 hover:bg-gray-100 rounded">Cancel</button>
          <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Save Mapping</button>
        </div>
      </form>
    </div>
  </div>

  <script src="/js/template-mappings.js"></script>
</body>
</html>
```

File 2: public/js/template-mappings.js
```javascript
// Template Mappings Manager - Phase 3b Feature 1
let currentProjectId = null;
let templates = [];
let categories = [];
let issueMappings = [];
let actionMappings = [];

// Initialize
document.addEventListener('DOMContentLoaded', async () => {
  await loadProjects();
  await loadTemplates();
  await loadCategories();
  await loadMappings();
  
  setupEventListeners();
  setupTabs();
});

// Load projects for filter
async function loadProjects() {
  try {
    const response = await fetch('/api/projects');
    const projects = await response.json();
    
    const select = document.getElementById('projectFilter');
    projects.forEach(project => {
      const option = document.createElement('option');
      option.value = project.id;
      option.textContent = project.name;
      select.appendChild(option);
    });
  } catch (error) {
    console.error('Error loading projects:', error);
  }
}

// Load templates
async function loadTemplates() {
  try {
    const response = await fetch('/api/templates?sort=name');
    const data = await response.json();
    templates = data.templates || [];
    
    // Populate template selects
    populateTemplateSelect('issueTemplateSelect');
    populateTemplateSelect('actionTemplateSelect');
  } catch (error) {
    console.error('Error loading templates:', error);
  }
}

function populateTemplateSelect(selectId) {
  const select = document.getElementById(selectId);
  select.innerHTML = '<option value="">Select template...</option>';
  
  templates.forEach(template => {
    const option = document.createElement('option');
    option.value = template.id;
    option.textContent = `${template.name} (${template.usage_count || 0} uses)`;
    select.appendChild(option);
  });
}

// Load action item categories
async function loadCategories() {
  try {
    const response = await fetch('/api/action-item-categories');
    categories = await response.json();
    
    const select = document.getElementById('actionCategorySelect');
    select.innerHTML = '<option value="">Select category...</option>';
    
    categories.forEach(category => {
      const option = document.createElement('option');
      option.value = category.id;
      option.textContent = category.name;
      select.appendChild(option);
    });
  } catch (error) {
    console.error('Error loading categories:', error);
  }
}

// Load mappings
async function loadMappings() {
  const projectParam = currentProjectId ? `?projectId=${currentProjectId}` : '';
  
  try {
    // Load issue type mappings
    const issueResponse = await fetch(`/api/templates/issue-type-mappings${projectParam}`);
    issueMappings = await issueResponse.json();
    renderIssueMappings();
    
    // Load action category mappings
    const actionResponse = await fetch(`/api/templates/action-category-mappings${projectParam}`);
    actionMappings = await actionResponse.json();
    renderActionMappings();
  } catch (error) {
    console.error('Error loading mappings:', error);
  }
}

// Render issue type mappings
function renderIssueMappings() {
  const container = document.getElementById('issueTypeMappingsList');
  
  if (issueMappings.length === 0) {
    container.innerHTML = '<p class="text-gray-500 text-center py-8">No issue type mappings configured yet.</p>';
    return;
  }
  
  container.innerHTML = issueMappings.map(mapping => `
    <div class="flex items-center justify-between p-4 border rounded hover:bg-gray-50">
      <div class="flex-1">
        <div class="font-medium text-gray-900">${mapping.issue_type}</div>
        <div class="text-sm text-gray-600">→ ${mapping.template_name}</div>
        ${mapping.project_id ? '<span class="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">Project-specific</span>' : '<span class="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded">Global</span>'}
      </div>
      <div class="flex gap-2">
        <button onclick="deleteIssueMapping(${mapping.id})" class="text-red-600 hover:text-red-800 px-3 py-1 text-sm">Delete</button>
      </div>
    </div>
  `).join('');
}

// Render action category mappings
function renderActionMappings() {
  const container = document.getElementById('actionCategoryMappingsList');
  
  if (actionMappings.length === 0) {
    container.innerHTML = '<p class="text-gray-500 text-center py-8">No action category mappings configured yet.</p>';
    return;
  }
  
  container.innerHTML = actionMappings.map(mapping => `
    <div class="flex items-center justify-between p-4 border rounded hover:bg-gray-50">
      <div class="flex-1">
        <div class="font-medium text-gray-900">${mapping.category_name}</div>
        <div class="text-sm text-gray-600">→ ${mapping.template_name}</div>
        ${mapping.project_id ? '<span class="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">Project-specific</span>' : '<span class="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded">Global</span>'}
      </div>
      <div class="flex gap-2">
        <button onclick="deleteActionMapping(${mapping.id})" class="text-red-600 hover:text-red-800 px-3 py-1 text-sm">Delete</button>
      </div>
    </div>
  `).join('');
}

// Event listeners
function setupEventListeners() {
  // Project filter
  document.getElementById('projectFilter').addEventListener('change', (e) => {
    currentProjectId = e.target.value || null;
    loadMappings();
  });
  
  // Add mapping buttons
  document.getElementById('addIssueTypeMapping').addEventListener('click', () => {
    showModal('addIssueTypeMappingModal');
  });
  
  document.getElementById('addActionCategoryMapping').addEventListener('click', () => {
    showModal('addActionCategoryMappingModal');
  });
  
  // Forms
  document.getElementById('addIssueTypeMappingForm').addEventListener('submit', handleAddIssueMapping);
  document.getElementById('addActionCategoryMappingForm').addEventListener('submit', handleAddActionMapping);
  
  // Cancel buttons
  document.querySelectorAll('.cancel-modal').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const modal = e.target.closest('.modal');
      hideModal(modal.id);
    });
  });
}

// Tab setup
function setupTabs() {
  document.getElementById('issueTypesTab').addEventListener('click', () => {
    showTab('issueTypes');
  });
  
  document.getElementById('actionCategoriesTab').addEventListener('click', () => {
    showTab('actionCategories');
  });
}

function showTab(tabName) {
  // Update tab buttons
  document.querySelectorAll('.tab-button').forEach(btn => {
    btn.classList.remove('active', 'border-blue-500', 'text-blue-600');
    btn.classList.add('text-gray-500');
  });
  
  const activeTab = document.getElementById(`${tabName}Tab`);
  activeTab.classList.add('active', 'border-blue-500', 'text-blue-600');
  activeTab.classList.remove('text-gray-500');
  
  // Update panels
  document.querySelectorAll('.tab-panel').forEach(panel => {
    panel.classList.add('hidden');
  });
  
  document.getElementById(`${tabName}Panel`).classList.remove('hidden');
}

// Add issue type mapping
async function handleAddIssueMapping(e) {
  e.preventDefault();
  
  const issueType = document.getElementById('issueTypeInput').value.trim();
  const templateId = document.getElementById('issueTemplateSelect').value;
  
  try {
    const response = await fetch('/api/templates/issue-type-mappings', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        issueType,
        templateId: parseInt(templateId),
        projectId: currentProjectId ? parseInt(currentProjectId) : null
      })
    });
    
    if (!response.ok) throw new Error('Failed to save mapping');
    
    hideModal('addIssueTypeMappingModal');
    e.target.reset();
    await loadMappings();
    showNotification('Issue type mapping saved successfully', 'success');
  } catch (error) {
    console.error('Error saving mapping:', error);
    showNotification('Failed to save mapping', 'error');
  }
}

// Add action category mapping
async function handleAddActionMapping(e) {
  e.preventDefault();
  
  const categoryId = document.getElementById('actionCategorySelect').value;
  const templateId = document.getElementById('actionTemplateSelect').value;
  
  try {
    const response = await fetch('/api/templates/action-category-mappings', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        categoryId: parseInt(categoryId),
        templateId: parseInt(templateId),
        projectId: currentProjectId ? parseInt(currentProjectId) : null
      })
    });
    
    if (!response.ok) throw new Error('Failed to save mapping');
    
    hideModal('addActionCategoryMappingModal');
    e.target.reset();
    await loadMappings();
    showNotification('Action category mapping saved successfully', 'success');
  } catch (error) {
    console.error('Error saving mapping:', error);
    showNotification('Failed to save mapping', 'error');
  }
}

// Delete mappings
async function deleteIssueMapping(id) {
  if (!confirm('Delete this mapping?')) return;
  
  try {
    const response = await fetch(`/api/templates/issue-type-mappings/${id}`, {
      method: 'DELETE'
    });
    
    if (!response.ok) throw new Error('Failed to delete mapping');
    
    await loadMappings();
    showNotification('Mapping deleted', 'success');
  } catch (error) {
    console.error('Error deleting mapping:', error);
    showNotification('Failed to delete mapping', 'error');
  }
}

async function deleteActionMapping(id) {
  if (!confirm('Delete this mapping?')) return;
  
  try {
    const response = await fetch(`/api/templates/action-category-mappings/${id}`, {
      method: 'DELETE'
    });
    
    if (!response.ok) throw new Error('Failed to delete mapping');
    
    await loadMappings();
    showNotification('Mapping deleted', 'success');
  } catch (error) {
    console.error('Error deleting mapping:', error);
    showNotification('Failed to delete mapping', 'error');
  }
}

// Modal helpers
function showModal(modalId) {
  document.getElementById(modalId).classList.remove('hidden');
}

function hideModal(modalId) {
  document.getElementById(modalId).classList.add('hidden');
}

// Notification helper
function showNotification(message, type = 'info') {
  const colors = {
    success: 'bg-green-500',
    error: 'bg-red-500',
    info: 'bg-blue-500'
  };
  
  const notification = document.createElement('div');
  notification.className = `fixed top-4 right-4 ${colors[type]} text-white px-6 py-3 rounded shadow-lg z-50`;
  notification.textContent = message;
  document.body.appendChild(notification);
  
  setTimeout(() => notification.remove(), 3000);
}
```

TESTING:
1. Navigate to http://localhost:3000/template-mappings.html
2. Verify page loads without errors
3. Test adding issue type mapping
4. Test adding action category mapping
5. Test filtering by project
6. Test deleting mappings
7. Verify tabs switch correctly

VALIDATION:
- Page loads and displays correctly
- All tabs work
- Project filter works
- Add mapping modals open/close
- Forms submit successfully
- Mappings display in lists
- Delete functionality works
- Notifications show on success/error

COMMIT MESSAGE:
"feat(phase3b): add admin UI for template auto-creation mappings

- New template-mappings.html page
- template-mappings.js frontend logic
- Configure issue type → template mappings
- Configure action category → template mappings
- Project-specific and global mappings
- Tab interface for two mapping types

Completes Phase 3b Feature 1: Auto-Create Checklist from Issue Type"

FINAL STEP:
Add link to navigation in index.html or main dashboard:
<a href="/template-mappings.html">Template Settings</a>
