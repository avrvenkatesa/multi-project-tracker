Create backend API for Phase 3b Feature 4: Improved Linking UI

CONTEXT:
- Phase 3b Features 1-3 are complete
- Working on branch: feature/checklist-system-phase3
- Issues and action items can have linked checklists
- Need API endpoints to retrieve all checklists linked to a specific issue or action item
- Should include completion statistics for progress bars

TASK:
Create two new API endpoints that return all checklists linked to an issue or action item,
including completion statistics.

IMPLEMENTATION:

Add these endpoints to server.js:
```javascript
// ============================================
// Phase 3b Feature 4: Improved Linking UI
// ============================================

/**
 * Get all checklists linked to a specific issue
 * GET /api/issues/:id/checklists
 */
app.get('/api/issues/:id/checklists', async (req, res) => {
  try {
    const { id } = req.params;
    const completionService = require('./services/completion-service.js');
    
    // Get all checklists linked to this issue
    const checklistsResult = await pool.query(
      `SELECT 
        c.id,
        c.title,
        c.description,
        c.template_id,
        c.project_id,
        c.related_issue_id,
        c.status,
        c.created_at,
        c.updated_at,
        ct.name as template_name
      FROM checklists c
      LEFT JOIN checklist_templates ct ON c.template_id = ct.id
      WHERE c.related_issue_id = $1
      ORDER BY c.created_at DESC`,
      [id]
    );
    
    const checklists = checklistsResult.rows;
    
    // Calculate completion stats for each checklist
    const checklistsWithStats = await Promise.all(
      checklists.map(async (checklist) => {
        const completion = await completionService.calculateChecklistCompletion(checklist.id);
        
        return {
          ...checklist,
          completion: {
            total: completion.total,
            completed: completion.completed,
            percentage: completion.percentage
          }
        };
      })
    );
    
    res.json({
      issueId: parseInt(id),
      count: checklistsWithStats.length,
      checklists: checklistsWithStats
    });
    
  } catch (error) {
    console.error('Error fetching issue checklists:', error);
    res.status(500).json({ error: 'Failed to fetch checklists' });
  }
});

/**
 * Get all checklists linked to a specific action item
 * GET /api/action-items/:id/checklists
 */
app.get('/api/action-items/:id/checklists', async (req, res) => {
  try {
    const { id } = req.params;
    const completionService = require('./services/completion-service.js');
    
    // Get all checklists linked to this action item
    const checklistsResult = await pool.query(
      `SELECT 
        c.id,
        c.title,
        c.description,
        c.template_id,
        c.project_id,
        c.related_action_id,
        c.status,
        c.created_at,
        c.updated_at,
        ct.name as template_name
      FROM checklists c
      LEFT JOIN checklist_templates ct ON c.template_id = ct.id
      WHERE c.related_action_id = $1
      ORDER BY c.created_at DESC`,
      [id]
    );
    
    const checklists = checklistsResult.rows;
    
    // Calculate completion stats for each checklist
    const checklistsWithStats = await Promise.all(
      checklists.map(async (checklist) => {
        const completion = await completionService.calculateChecklistCompletion(checklist.id);
        
        return {
          ...checklist,
          completion: {
            total: completion.total,
            completed: completion.completed,
            percentage: completion.percentage
          }
        };
      })
    );
    
    res.json({
      actionItemId: parseInt(id),
      count: checklistsWithStats.length,
      checklists: checklistsWithStats
    });
    
  } catch (error) {
    console.error('Error fetching action item checklists:', error);
    res.status(500).json({ error: 'Failed to fetch checklists' });
  }
});

/**
 * Unlink a checklist from its issue or action item
 * DELETE /api/checklists/:id/link
 */
app.delete('/api/checklists/:id/link', async (req, res) => {
  try {
    const { id } = req.params;
    
    // Unlink by setting related_issue_id and related_action_id to NULL
    const result = await pool.query(
      `UPDATE checklists 
       SET related_issue_id = NULL, 
           related_action_id = NULL,
           updated_at = NOW()
       WHERE id = $1
       RETURNING *`,
      [id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Checklist not found' });
    }
    
    res.json({
      success: true,
      message: 'Checklist unlinked',
      checklist: result.rows[0]
    });
    
  } catch (error) {
    console.error('Error unlinking checklist:', error);
    res.status(500).json({ error: 'Failed to unlink checklist' });
  }
});
```

RESPONSE FORMAT:

GET /api/issues/75/checklists:
```json
{
  "issueId": 75,
  "count": 2,
  "checklists": [
    {
      "id": 30,
      "title": "Auto-generated checklist for issue 75",
      "description": null,
      "template_id": 27,
      "template_name": "Assessment & Planning 1",
      "project_id": 1,
      "related_issue_id": 75,
      "status": "active",
      "created_at": "2025-10-18T20:16:14.577Z",
      "updated_at": "2025-10-18T20:16:14.577Z",
      "completion": {
        "total": 27,
        "completed": 27,
        "percentage": 100
      }
    }
  ]
}
```

TESTING:

Test with existing data from previous features:
```bash
# Test 1: Get checklists for issue 75
curl http://localhost:3000/api/issues/75/checklists

# Test 2: Get checklists for action item 123
curl http://localhost:3000/api/action-items/123/checklists

# Test 3: Unlink checklist 30
curl -X DELETE http://localhost:3000/api/checklists/30/link
```

VALIDATION:
✅ Endpoints return correct data structure
✅ Completion stats calculated correctly
✅ Multiple checklists per entity supported
✅ Empty array returned if no checklists
✅ Unlink removes relationship without deleting checklist

COMMIT MESSAGE:
"feat(phase3b): add API endpoints for linked checklists

- GET /api/issues/:id/checklists - retrieve linked checklists with stats
- GET /api/action-items/:id/checklists - same for action items
- DELETE /api/checklists/:id/link - unlink checklist from entity
- Include completion statistics (total, completed, percentage)
- Support multiple checklists per issue/action item

Part of Phase 3b Feature 4: Improved Linking UI"